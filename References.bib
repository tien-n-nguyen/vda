@article{li2019gcn,
	title={GCN-LASE: Towards adequately incorporating link attributes in graph convolutional networks},
	author={Li, Ziyao and Zhang, Liang and Song, Guojie},
	journal={arXiv preprint arXiv:1902.09817},
	year={2019}
}

@inproceedings{krizhevsky-2012,
	title={Imagenet classification with deep convolutional neural networks},
	author={Krizhevsky, Alex and Sutskever, Ilya and Hinton, Geoffrey E},
	booktitle={Advances in neural information processing systems},
	pages={1097--1105},
	year={2012}
}

@article{barowy2018excelint,
  title={ExceLint: automatically finding spreadsheet formula errors},
  author={Barowy, Daniel W and Berger, Emery D and Zorn, Benjamin},
  journal={Proceedings of the ACM on Programming Languages},
  volume={2},
  number={OOPSLA},
  pages={1--26},
  year={2018},
  publisher={ACM New York, NY, USA}
}

@techreport{singh2017melford,
	title={Melford: Using neural networks to find spreadsheet errors},
	institution={Microsoft Research, Microsoft Tech Report Number MSR-TR-2017-5},
	author={Singh, Rishabh and Livshits, Benjamin and Zorn, Benjamin},
	year={2017}
}

@online{GZoltar,
	title = {GZoltar},
	year = 2019,
	url = {http://www.gzoltar.com/},
}


@online{PIT,
	title = {PIT},
	year = 2019,
	url = {https://pitest.org/},
}

@online{JDT,
	title = {JDT},
	year = 2021,
	url = {https://www.eclipse.org/jdt/core/tools/jdtcoretools/index.php},
}


@online{FaultLocalization2021,
	title = {The GitHub Repository for This Study},
	year = 2021,
	url = {https://github.com/deeprl4fl2021icse/deeprl4fl-2021-icse},
}


@article{bourlard1988auto,
	title={Auto-association by multilayer perceptrons and singular value decomposition},
	author={Bourlard, Herv{\'e} and Kamp, Yves},
	journal={Biological cybernetics},
	volume={59},
	number={4-5},
	pages={291--294},
	year={1988},
	publisher={Springer}
}

@inproceedings{zhang2019novel,
	title={A novel neural source code representation based on {Abstract Syntax Tree}},
	author={Zhang, Jian and Wang, Xu and Zhang, Hongyu and Sun, Hailong and Wang, Kaixuan and Liu, Xudong},
	booktitle={Proceedings of the 41st International Conference on Software Engineering (ICSE'19)},
	pages={783--794},
	year={2019},
	organization={IEEE Press}
}

@inproceedings{socher2011parsing,
	title={Parsing natural scenes and natural language with recursive neural networks},
	author={Socher, Richard and Lin, Cliff C and Manning, Chris and Ng, Andrew Y},
	booktitle={Proceedings of the 28th international conference on machine learning (ICML-11)},
	pages={129--136},
	year={2011}
}

@inproceedings{DStar,
	title={Software fault localization using {DStar (D*)}},
	author={Wong, W Eric and Debroy, Vidroha and Li, Yihao and Gao, Ruizhi},
	booktitle={6th IEEE International Conference on Software Security and Reliability},
	pages={21--30},
	year={2012},
	organization={IEEE}
}

@INPROCEEDINGS{MUSE,
  author={S. {Moon} and Y. {Kim} and M. {Kim} and S. {Yoo}},
  booktitle={IEEE International Conference on Software Testing, Verification and Validation}, 
  title={Ask the Mutants: Mutating Faulty Programs for Fault Localization}, 
  year={2014},
  volume={},
  number={},
  pages={153-162},
  doi={10.1109/ICST.2014.28}
}


@article{Metallaxis,
	title={{Metallaxis-FL}: mutation-based fault localization},
	author={Papadakis, Mike and Le Traon, Yves},
	journal={Software Testing, Verification and Reliability},
	volume={25},
	number={5-7},
	pages={605--628},
	year={2015},
	publisher={Wiley Online Library}
}

@article{RBF_Neural_Network,
	title={Effective software fault localization using an {RBF} neural network},
	author={Wong, W Eric and Debroy, Vidroha and Golden, Richard and Xu, Xiaofeng and Thuraisingham, Bhavani},
	journal={IEEE Transactions on Reliability},
	volume={61},
	number={1},
	pages={149--169},
	year={2011},
	publisher={IEEE}
}

@inproceedings{DeepFL,
	title={{DeepFL}: integrating multiple fault diagnosis dimensions for deep fault localization},
	author={Li, Xia and Li, Wei and Zhang, Yuqun and Zhang, Lingming},
	booktitle={Proceedings of the 28th ACM SIGSOFT International Symposium on Software Testing and Analysis},
	pages={169--180},
	year={2019},
	organization={ACM}
}

@inproceedings{MULTRIC,
	title={Learning to combine multiple ranking metrics for fault localization},
	author={Xuan, Jifeng and Monperrus, Martin},
	booktitle={IEEE International Conference on Software Maintenance and Evolution (ICSME'14)},
	pages={191--200},
	year={2014},
	organization={IEEE}
}

@inproceedings{wong2008crosstab,
	title={A crosstab-based statistical method for effective fault localization},
	author={Wong, Eric and Wei, Tingting and Qi, Yu and Zhao, Lei},
	booktitle={2008 1st international conference on software testing, verification, and validation},
	pages={42--51},
	year={2008},
	organization={IEEE}
}

@inproceedings{zhang2019cnn,
	title={CNN-FL: An effective approach for localizing faults using convolutional neural networks},
	author={Zhang, Zhuo and Lei, Yan and Mao, Xiaoguang and Li, Panpan},
	booktitle={2019 IEEE 26th International Conference on Software Analysis, Evolution and Reengineering (SANER)},
	pages={445--455},
	year={2019},
	organization={IEEE}
}

@inproceedings{li2021fault,
	title={Fault Localization with Code Coverage Representation Learning},
	author={Li, Yi and Wang, Shaohua and Nguyen, Tien N},
	booktitle={2021 IEEE/ACM 43rd International Conference on Software Engineering (ICSE)},
	pages={661--673},
	year={2021},
	organization={IEEE}
}

@inproceedings{misra2016cross,
	title={Cross-stitch networks for multi-task learning},
	author={Misra, Ishan and Shrivastava, Abhinav and Gupta, Abhinav and Hebert, Martial},
	booktitle={Proceedings of the IEEE conference on computer vision and pattern recognition},
	pages={3994--4003},
	year={2016}
}

@article{kipf2016semi,
	title={Semi-supervised classification with graph convolutional networks},
	author={Kipf, Thomas N and Welling, Max},
	journal={arXiv preprint arXiv:1609.02907},
	year={2016}
}

@inproceedings{FLUCCS,
	title={Fluccs: Using code and change metrics to improve fault localization},
	author={Sohn, Jeongju and Yoo, Shin},
	booktitle={Proceedings of the 26th ACM SIGSOFT International Symposium on Software Testing and Analysis (ISSTA'17)},
	pages={273--283},
	year={2017},
	organization={ACM}
}

@article{TraPT,
  title={Transforming programs and tests in tandem for fault localization},
  author={Li, Xia and Zhang, Lingming},
  journal={Proceedings of the ACM on Programming Languages},
  volume={1},
  number={OOPSLA},
  pages={1--30},
  year={2017},
  publisher={ACM New York, NY, USA}
}

@article{kim2014convolutional,
	title={Convolutional neural networks for sentence classification},
	author={Kim, Yoon},
	journal={arXiv preprint arXiv:1408.5882},
	year={2014}
}

@online{AutoFix2019,
	title = {The GitHub Repository for This Study},
	year = 2019,
	url = {https://github.com/ICSE-2019-AUTOFIX/ICSE-2019-AUTOFIX},
}

@online{defects4j,
	title = {The {Defects4J} Data Set},
	year = 2019,
	url = {https://github.com/rjust/defects4j},
}

@online{manybugs,
	title = {The {ManyBugs} Data Set},
	year = 2019,
	url = {https://repairbenchmarks.cs.umass.edu/},
}

@online{BugsInPy,
	title = {The {BugsInPy} Data Set},
	year = 2020,
	url = {https://github.com/soarsmu/BugsInPy},
}

@inproceedings{widyasari2020bugsinpy,
	title={BugsInPy: a database of existing bugs in Python programs to enable controlled testing and debugging studies},
	author={Widyasari, Ratnadira and Sim, Sheng Qin and Lok, Camellia and Qi, Haodi and Phan, Jack and Tay, Qijin and Tan, Constance and Wee, Fiona and Tan, Jodie Ethelda and Yieh, Yuheng and others},
	booktitle={Proceedings of the 28th ACM Joint Meeting on European Software Engineering Conference and Symposium on the Foundations of Software Engineering},
	pages={1556--1560},
	year={2020}
}



@online{NNI,
	title = {The NNI autoML tool},
	year = 2021,
	url = {https://github.com/microsoft/nni},
}


@article{yioopsla19,
	title={Improving Bug Detection via Context-based
	Code Representation Learning and Attention-based Neural Networks},
	author={Li, Yi and Wang, Shaohua, and Nguyen, Tien N. and Nguyen, Son Van},
	journal={Proc. ACM Program. Lang. 3, OOPSLA,
	Article 1 (October 2019)},
	year={2019}
}


@article{tai2015improved,
	title={Improved semantic representations from tree-structured long short-term memory networks},
	author={Tai, Kai Sheng and Socher, Richard and Manning, Christopher D},
	journal={arXiv preprint arXiv:1503.00075},
	year={2015}
}

@inproceedings{tang2015document,
    title = "Document Modeling with Gated Recurrent Neural Network for Sentiment Classification",
    author = "Tang, Duyu  and
      Qin, Bing  and
      Liu, Ting",
    booktitle = "Proceedings of the 2015 Conference on Empirical Methods in Natural Language Processing",
    month = sep,
    year = "2015",
    publisher = "Association for Computational Linguistics",
    url = "https://www.aclweb.org/anthology/D15-1167",
    doi = "10.18653/v1/D15-1167",
    pages = "1422--1432",
}


@article{bahdanau2014neural,
	title={Neural machine translation by jointly learning to align and translate},
	author={Bahdanau, Dzmitry and Cho, Kyunghyun and Bengio, Yoshua},
	journal={arXiv preprint arXiv:1409.0473},
	year={2014}
}

@inproceedings{liu2019you,
	title={You cannot fix what you cannot find! an investigation of fault localization bias in benchmarking automated program repair systems},
	author={Liu, Kui and Koyuncu, Anil and Bissyand{\'e}, Tegawend{\'e} F and Kim, Dongsun and Klein, Jacques and Le Traon, Yves},
	booktitle={2019 12th IEEE Conference on Software Testing, Validation and Verification (ICST)},
	pages={102--113},
	year={2019},
	organization={IEEE}
}

@inproceedings{pearson2017evaluating,
	title={Evaluating and improving fault localization},
	author={Pearson, Spencer and Campos, Jos{\'e} and Just, Ren{\'e} and Fraser, Gordon and Abreu, Rui and Ernst, Michael D and Pang, Deric and Keller, Benjamin},
	booktitle={Proceedings of the 39th International Conference on Software Engineering},
	pages={609--620},
	year={2017},
	organization={IEEE Press}
}


@inproceedings{xuan2014test,
	title={Test case purification for improving fault localization},
	author={Xuan, Jifeng and Monperrus, Martin},
	booktitle={Proceedings of the 22nd ACM SIGSOFT International Symposium on Foundations of Software Engineering},
	pages={52--63},
	year={2014},
	organization={ACM}
}

@inproceedings{liu2018lsrepair,
	title={LSRepair: Live search of fix ingredients for automated program repair},
	author={Liu, Kui and Koyuncu, Anil and Kim, Kisub and Kim, Dongsun and Bissyand{\'e}, Tegawend{\'e} F},
	booktitle={2018 25th Asia-Pacific Software Engineering Conference (APSEC)},
	pages={658--662},
	year={2018},
	organization={IEEE}
}


@inproceedings{xin2017leveraging,
	title={Leveraging syntax-related code for automated program repair},
	author={Xin, Qi and Reiss, Steven P},
	booktitle={Proceedings of the 32nd IEEE/ACM International Conference on Automated Software Engineering},
	pages={660--670},
	year={2017},
	organization={IEEE Press}
}

@inproceedings{xiong2017precise,
	title={Precise condition synthesis for program repair},
	author={Xiong, Yingfei and Wang, Jie and Yan, Runfa and Zhang, Jiachen and Han, Shi and Huang, Gang and Zhang, Lu},
	booktitle={2017 IEEE/ACM 39th International Conference on Software Engineering (ICSE)},
	pages={416--426},
	year={2017},
	organization={IEEE}
}


@inproceedings{wen2018context,
	title={Context-aware patch generation for better automated program repair},
	author={Wen, Ming and Chen, Junjie and Wu, Rongxin and Hao, Dan and Cheung, Shing-Chi},
	booktitle={Proceedings of the 40th International Conference on Software Engineering},
	pages={1--11},
	year={2018},
	organization={ACM}
}


@inproceedings{saha2019harnessing,
	title={Harnessing evolution for multi-hunk program repair},
	author={Saha, Seemanta and Saha, Ripon K and Prasad, Mukul R},
	booktitle={Proceedings of the 41st International Conference on Software Engineering},
	pages={13--24},
	year={2019},
	organization={IEEE Press}
}


@article{chakrabortycodit,
	title={CODIT: Code Editing with Tree-Based Neural Machine Translation},
	author={Chakraborty, Saikat and Allamanis, Miltiadis and Ray, Baishakhi}
}


@article{chen2018sequencer,
	title={Sequencer: Sequence-to-sequence learning for end-to-end program repair},
	author={Chen, Zimin and Kommrusch, Steve and Tufano, Michele and Pouchet, Louis-No{\"e}l and Poshyvanyk, Denys and Monperrus, Martin},
	journal={arXiv preprint arXiv:1901.01808},
	year={2018}
}

@article{see2017get,
	title={Get to the point: Summarization with pointer-generator networks},
	author={See, Abigail and Liu, Peter J and Manning, Christopher D},
	journal={arXiv preprint arXiv:1704.04368},
	year={2017}
}

@inproceedings{white2016deep,
	title={Deep learning code fragments for code clone detection},
	author={White, Martin and Tufano, Michele and Vendome, Christopher and Poshyvanyk, Denys},
	booktitle={Proceedings of the 31st IEEE/ACM International Conference on Automated Software Engineering},
	pages={87--98},
	year={2016},
	organization={ACM}
}


@inproceedings{tufano2019learning,
	title={On learning meaningful code changes via neural machine translation},
	author={Tufano, Michele and Pantiuchina, Jevgenija and Watson, Cody and Bavota, Gabriele and Poshyvanyk, Denys},
	booktitle={Proceedings of the 41st International Conference on Software Engineering},
	pages={25--36},
	year={2019},
	organization={IEEE Press}
}

@inproceedings{tufano2018empirical,
	title={An empirical investigation into learning bug-fixing patches in the wild via neural machine translation.},
	author={Tufano, Michele and Watson, Cody and Bavota, Gabriele and Di Penta, Massimiliano and White, Martin and Poshyvanyk, Denys},
	booktitle={Proceedings of the 33rd IEEE/ACM International Conference on Automated Software Engineering},
	year={2018}
}

@article{hata2018learning,
	title={Learning to generate corrective patches using neural machine translation},
	author={Hata, Hideaki and Shihab, Emad and Neubig, Graham},
	journal={arXiv preprint arXiv:1812.07170},
	year={2018}
}

@inproceedings{gupta2017deepfix,
	title={Deepfix: Fixing common c language errors by deep learning},
	author={Gupta, Rahul and Pal, Soham and Kanade, Aditya and Shevade, Shirish},
	booktitle={Thirty-First AAAI Conference on Artificial Intelligence},
	year={2017}
}

@inproceedings{white2019sorting,
	title={Sorting and transforming program repair ingredients via deep learning code similarities},
	author={White, Martin and Tufano, Michele and Martinez, Matias and Monperrus, Martin and Poshyvanyk, Denys},
	booktitle={2019 IEEE 26th International Conference on Software Analysis, Evolution and Reengineering (SANER)},
	pages={479--490},
	year={2019},
	organization={IEEE}
}


@inproceedings{liu2019avatar,
	title={Avatar: Fixing semantic bugs with fix patterns of static analysis violations},
	author={Liu, Kui and Koyuncu, Anil and Kim, Dongsun and Bissyand{\'e}, Tegawend{\'e} F},
	booktitle={2019 IEEE 26th International Conference on Software Analysis, Evolution and Reengineering (SANER)},
	pages={1--12},
	year={2019},
	organization={IEEE}
}

@article{koyuncu2018fixminer,
	title={Fixminer: Mining relevant fix patterns for automated program repair},
	author={Koyuncu, Anil and Liu, Kui and Bissyand{\'e}, Tegawend{\'e} F and Kim, Dongsun and Klein, Jacques and Monperrus, Martin and Traon, Yves Le},
	journal={arXiv preprint arXiv:1810.01791},
	year={2018}
}

@inproceedings{jiang2018shaping,
	title={Shaping program repair space with existing patches and similar code},
	author={Jiang, Jiajun and Xiong, Yingfei and Zhang, Hongyu and Gao, Qing and Chen, Xiangqun},
	booktitle={Proceedings of the 27th ACM SIGSOFT International Symposium on Software Testing and Analysis},
	pages={298--309},
	year={2018},
	organization={ACM}
}


@inproceedings{wen2018context,
	title={Context-aware patch generation for better automated program repair},
	author={Wen, Ming and Chen, Junjie and Wu, Rongxin and Hao, Dan and Cheung, Shing-Chi},
	booktitle={Proceedings of the 40th International Conference on Software Engineering},
	pages={1--11},
	year={2018},
	organization={ACM}
}


@inproceedings{tan2016anti,
	title={Anti-patterns in search-based program repair},
	author={Tan, Shin Hwei and Yoshida, Hiroaki and Prasad, Mukul R and Roychoudhury, Abhik},
	booktitle={Proceedings of the 2016 24th ACM SIGSOFT International Symposium on Foundations of Software Engineering},
	pages={727--738},
	year={2016},
	organization={ACM}
}

@inproceedings{long2015staged,
	title={Staged program repair with condition synthesis},
	author={Long, Fan and Rinard, Martin},
	booktitle={Proceedings of the 2015 10th Joint Meeting on Foundations of Software Engineering},
	pages={166--178},
	year={2015},
	organization={Citeseer}
}


@inproceedings{saha2017elixir,
	title={ELIXIR: effective object oriented program repair},
	author={Saha, Ripon K and Lyu, Yingjun and Yoshida, Hiroaki and Prasad, Mukul R},
	booktitle={Proceedings of the 32nd IEEE/ACM International Conference on Automated Software Engineering},
	pages={648--659},
	year={2017},
	organization={IEEE Press}
}

@inproceedings{long2017automatic,
	title={Automatic inference of code transforms for patch generation},
	author={Long, Fan and Amidon, Peter and Rinard, Martin},
	booktitle={Proceedings of the 2017 11th Joint Meeting on Foundations of Software Engineering},
	pages={727--739},
	year={2017},
	organization={ACM}
}

@inproceedings{long2016automatic,
	title={Automatic patch generation by learning correct code},
	author={Long, Fan and Rinard, Martin},
	booktitle={ACM SIGPLAN Notices},
	volume={51},
	number={1},
	pages={298--312},
	year={2016},
	organization={ACM}
}

@inproceedings{smith2015cure,
	title={Is the cure worse than the disease? overfitting in automated program repair},
	author={Smith, Edward K and Barr, Earl T and Le Goues, Claire and Brun, Yuriy},
	booktitle={Proceedings of the 2015 10th Joint Meeting on Foundations of Software Engineering},
	pages={532--543},
	year={2015},
	organization={ACM}
}

@inproceedings{le2016history,
	title={History driven program repair},
	author={Le, Xuan Bach D and Lo, David and Le Goues, Claire},
	booktitle={2016 IEEE 23rd International Conference on Software Analysis, Evolution, and Reengineering (SANER)},
	volume={1},
	pages={213--224},
	year={2016},
	organization={IEEE}
}

@inproceedings{kim2013automatic,
	title={Automatic patch generation learned from human-written patches},
	author={Kim, Dongsun and Nam, Jaechang and Song, Jaewoo and Kim, Sunghun},
	booktitle={Proceedings of the 2013 International Conference on Software Engineering},
	pages={802--811},
	year={2013},
	organization={IEEE Press}
}


@article{le2011genprog,
	title={Genprog: A generic method for automatic software repair},
	author={Le Goues, Claire and Nguyen, ThanhVu and Forrest, Stephanie and Weimer, Westley},
	journal={Ieee transactions on software engineering},
	volume={38},
	number={1},
	pages={54--72},
	year={2011},
	publisher={IEEE}
}

@inproceedings{qi2014strength,
	title={The strength of random search on automated program repair},
	author={Qi, Yuhua and Mao, Xiaoguang and Lei, Yan and Dai, Ziying and Wang, Chengsong},
	booktitle={Proceedings of the 36th International Conference on Software Engineering},
	pages={254--265},
	year={2014},
	organization={ACM}
}

@inproceedings{martinez2016astor,
	title={Astor: A program repair library for java},
	author={Martinez, Matias and Monperrus, Martin},
	booktitle={Proceedings of the 25th International Symposium on Software Testing and Analysis},
	pages={441--444},
	year={2016},
	organization={ACM}
}

@inproceedings{nguyen2013semfix,
	title={Semfix: Program repair via semantic analysis},
	author={Nguyen, Hoang Duong Thien and Qi, Dawei and Roychoudhury, Abhik and Chandra, Satish},
	booktitle={2013 35th International Conference on Software Engineering (ICSE)},
	pages={772--781},
	year={2013},
	organization={IEEE}
}






@Misc{soot,
	howpublished = {\url{https://sable.github.io/soot/}},
	note = {Last Accessed July 11, 2019},
	title = {Soot Introduction.},
	author = {Soot}
}

@Misc{WALA,
	howpublished = {\url{http://wala.sourceforge.net/wiki/index.php/Main_Page}},
	note = {Last Accessed July 11, 2019},
	title = {WALA Documentation.},
	author = {WALA}
}

@inproceedings{Kildall-1973,
	title={A unified approach to global program optimization},
	author={Kildall, Gary A},
	booktitle={Proceedings of the 1st annual ACM SIGACT-SIGPLAN symposium on Principles of programming languages},
	pages={194--206},
	year={1973},
	organization={ACM}
}

@inproceedings{ayewah-2007,
	title={Evaluating static analysis defect warnings on production software},
	author={Ayewah, Nathaniel and Pugh, William and Morgenthaler, J David and Penix, John and Zhou, YuQian},
	booktitle={Proceedings of the 7th ACM SIGPLAN-SIGSOFT workshop on Program analysis for software tools and engineering},
	pages={1--8},
	year={2007},
	organization={ACM}
}

@inproceedings{dagenais-2008,
	title={Enabling static analysis for partial java programs},
	author={Dagenais, Barth{\'e}l{\'e}my and Hendren, Laurie},
	booktitle={ACM Sigplan Notices},
	volume={43},
	number={10},
	pages={313--328},
	year={2008},
	organization={ACM}
}

@inproceedings{mockus-2000,
	title={Identifying Reasons for Software Changes using Historic Databases.},
	author={Mockus, Audris and Votta, Lawrence G},
	booktitle={icsm},
	pages={120--130},
	year={2000}
}

@inproceedings{krizhevsky-2012,
	title={Imagenet classification with deep lutional neural networks},
	author={Krizhevsky, Alex and Sutskever, Ilya and Hinton, Geoffrey E},
	booktitle={Advances in neural information processing systems},
	pages={1097--1105},
	year={2012}
}

@inproceedings{ray-2014,
	title={A large scale study of programming languages and code quality in github},
	author={Ray, Baishakhi and Posnett, Daryl and Filkov, Vladimir and Devanbu, Premkumar},
	booktitle={Proceedings of the 22nd ACM SIGSOFT International Symposium on Foundations of Software Engineering},
	pages={155--165},
	year={2014},
	organization={ACM}
}

@inproceedings{ray-2016,
	title={On the" naturalness" of buggy code},
	author={Ray, Baishakhi and Hellendoorn, Vincent and Godhane, Saheel and Tu, Zhaopeng and Bacchelli, Alberto and Devanbu, Premkumar},
	booktitle={2016 IEEE/ACM 38th International Conference on Software Engineering (ICSE)},
	pages={428--439},
	year={2016},
	organization={IEEE}
}

@inproceedings{Bian-2018,
	author = {Bian, Pan and Liang, Bin and Shi, Wenchang and Huang, Jianjun and Cai, Yan},
	title = {NAR-miner: Discovering Negative Association Rules from Code for Bug Detection},
	booktitle = {Proceedings of the 2018 26th ACM Joint Meeting on European Software Engineering Conference and Symposium on the Foundations of Software Engineering},
	series = {ESEC/FSE 2018},
	year = {2018},
	isbn = {978-1-4503-5573-5},
	location = {Lake Buena Vista, FL, USA},
	pages = {411--422},
	numpages = {12},
	url = {http://doi.acm.org/10.1145/3236024.3236032},
	doi = {10.1145/3236024.3236032},
	acmid = {3236032},
	publisher = {ACM},
	address = {New York, NY, USA},
	keywords = {Bug Detection, Code Mining, Negative Rule, Rule Explosion},
} 

@article{Pradel-2018,
	author    = {Michael Pradel and
	Koushik Sen},
	title     = {DeepBugs: {A} Learning Approach to Name-based Bug Detection},
	journal   = {CoRR},
	volume    = {abs/1805.11683},
	year      = {2018},
	url       = {http://arxiv.org/abs/1805.11683},
	archivePrefix = {arXiv},
	eprint    = {1805.11683},
	timestamp = {Mon, 13 Aug 2018 16:47:27 +0200},
	biburl    = {https://dblp.org/rec/bib/journals/corr/abs-1805-11683},
	bibsource = {dblp computer science bibliography, https://dblp.org}
}

@article{Alon-2018,
	author    = {Uri Alon and
	Meital Zilberstein and
	Omer Levy and
	Eran Yahav},
	title     = {code2vec: Learning Distributed Representations of Code},
	journal   = {CoRR},
	volume    = {abs/1803.09473},
	year      = {2018},
	url       = {http://arxiv.org/abs/1803.09473},
	archivePrefix = {arXiv},
	eprint    = {1803.09473},
	timestamp = {Mon, 13 Aug 2018 16:47:34 +0200},
	biburl    = {https://dblp.org/rec/bib/journals/corr/abs-1803-09473},
	bibsource = {dblp computer science bibliography, https://dblp.org}
}

@article{Ferrante-1987,
	author = {Ferrante, Jeanne and Ottenstein, Karl J. and Warren, Joe D.},
	title = {The Program Dependence Graph and Its Use in Optimization},
	journal = {ACM Trans. Program. Lang. Syst.},
	issue_date = {July 1987},
	volume = {9},
	number = {3},
	month = jul,
	year = {1987},
	issn = {0164-0925},
	pages = {319--349},
	numpages = {31},
	url = {http://doi.acm.org/10.1145/24039.24041},
	doi = {10.1145/24039.24041},
	acmid = {24041},
	publisher = {ACM},
	address = {New York, NY, USA},
} 

@inproceedings{Edward-1975,
	author = {Yourdon, Edward},
	title = {Structured Programming and Structured Design As Art Forms},
	booktitle = {Proceedings of the May 19-22, 1975, National Computer Conference and Exposition},
	series = {AFIPS '75},
	year = {1975},
	location = {Anaheim, California},
	pages = {277--277},
	numpages = {1},
	url = {http://doi.acm.org/10.1145/1499949.1499997},
	doi = {10.1145/1499949.1499997},
	acmid = {1499997},
	publisher = {ACM},
	address = {New York, NY, USA},
} 

@article{Cho-2014,
	author    = {Kyunghyun Cho and
	Bart van Merrienboer and
	{\c{C}}aglar G{\"{u}}l{\c{c}}ehre and
	Fethi Bougares and
	Holger Schwenk and
	Yoshua Bengio},
	title     = {Learning Phrase Representations using {RNN} Encoder-Decoder for Statistical
	Machine Translation},
	journal   = {CoRR},
	volume    = {abs/1406.1078},
	year      = {2014},
	url       = {http://arxiv.org/abs/1406.1078},
	archivePrefix = {arXiv},
	eprint    = {1406.1078},
	timestamp = {Mon, 13 Aug 2018 16:46:44 +0200},
	biburl    = {https://dblp.org/rec/bib/journals/corr/ChoMGBSB14},
	bibsource = {dblp computer science bibliography, https://dblp.org}
}

@article{Yin-2016,
	author    = {Wenpeng Yin and
	Hinrich Sch{\"{u}}tze and
	Bing Xiang and
	Bowen Zhou},
	title     = {{ABCNN:} Attention-Based Convolutional Neural Network for Modeling
	Sentence Pairs},
	journal   = {CoRR},
	volume    = {abs/1512.05193},
	year      = {2015},
	url       = {http://arxiv.org/abs/1512.05193},
	archivePrefix = {arXiv},
	eprint    = {1512.05193},
	timestamp = {Mon, 13 Aug 2018 16:47:36 +0200},
	biburl    = {https://dblp.org/rec/bib/journals/corr/YinSXZ15},
	bibsource = {dblp computer science bibliography, https://dblp.org}
}

@article{Grover-2016,
	author    = {Aditya Grover and
	Jure Leskovec},
	title     = {node2vec: Scalable Feature Learning for Networks},
	journal   = {CoRR},
	volume    = {abs/1607.00653},
	year      = {2016},
	url       = {http://arxiv.org/abs/1607.00653},
	archivePrefix = {arXiv},
	eprint    = {1607.00653},
	timestamp = {Mon, 13 Aug 2018 16:48:14 +0200},
	biburl    = {https://dblp.org/rec/bib/journals/corr/GroverL16},
	bibsource = {dblp computer science bibliography, https://dblp.org}
}

@article{Mikolov-2013,
	author    = {Tomas Mikolov and
	Ilya Sutskever and
	Kai Chen and
	Greg Corrado and
	Jeffrey Dean},
	title     = {Distributed Representations of Words and Phrases and their Compositionality},
	journal   = {CoRR},
	volume    = {abs/1310.4546},
	year      = {2013},
	url       = {http://arxiv.org/abs/1310.4546},
	archivePrefix = {arXiv},
	eprint    = {1310.4546},
	timestamp = {Mon, 13 Aug 2018 16:47:09 +0200},
	biburl    = {https://dblp.org/rec/bib/journals/corr/MikolovSCCD13},
	bibsource = {dblp computer science bibliography, https://dblp.org}
}

@incollection{LeCun-1989,
	author = {Cun, Yann Le and Galland, Conrad C. and Hinton, Geoffrey E.},
	chapter = {GEMINI: Gradient Estimation Through Matrix Inversion After Noise Injection},
	title = {Advances in Neural Information Processing Systems 1},
	editor = {Touretzky, David S.},
	year = {1989},
	isbn = {1-558-60015-9},
	pages = {141--148},
	numpages = {8},
	url = {http://dl.acm.org/citation.cfm?id=89851.89868},
	acmid = {89868},
	publisher = {Morgan Kaufmann Publishers Inc.},
	address = {San Francisco, CA, USA},
} 

@article{Vaswani-2017,
	author    = {Ashish Vaswani and
	Noam Shazeer and
	Niki Parmar and
	Jakob Uszkoreit and
	Llion Jones and
	Aidan N. Gomez and
	Lukasz Kaiser and
	Illia Polosukhin},
	title     = {Attention Is All You Need},
	journal   = {CoRR},
	volume    = {abs/1706.03762},
	year      = {2017},
	url       = {http://arxiv.org/abs/1706.03762},
	archivePrefix = {arXiv},
	eprint    = {1706.03762},
	timestamp = {Mon, 13 Aug 2018 16:48:37 +0200},
	biburl    = {https://dblp.org/rec/bib/journals/corr/VaswaniSPUJGKP17},
	bibsource = {dblp computer science bibliography, https://dblp.org}
}

@article{Allen-1970,
	author = {Allen, Frances E.},
	title = {Control Flow Analysis},
	journal = {SIGPLAN Not.},
	issue_date = {July 1970},
	volume = {5},
	number = {7},
	month = jul,
	year = {1970},
	issn = {0362-1340},
	pages = {1--19},
	numpages = {19},
	url = {http://doi.acm.org/10.1145/390013.808479},
	doi = {10.1145/390013.808479},
	acmid = {808479},
	publisher = {ACM},
	address = {New York, NY, USA},
} 

@ARTICLE{Callahan-1990, 
	author={D. {Callahan} and A. {Carle} and M. W. {Hall} and K. {Kennedy}}, 
	journal={IEEE Transactions on Software Engineering}, 
	title={Constructing the procedure call multigraph}, 
	year={1990}, 
	volume={16}, 
	number={4}, 
	pages={483-487}, 
	keywords={parallel programming;procedure call multigraph;algorithm;precise call multigraph;recursion;upper bound;polynomial;Throughput;Delay;Databases;Concurrency control;Flow graphs;Information retrieval;Erbium;Etching;Upper bound}, 
	doi={10.1109/32.54302}, 
	ISSN={0098-5589}, 
	month={April},}

@inproceedings{Wang-2016,
	author = {Wang, Song and Chollak, Devin and Movshovitz-Attias, Dana and Tan, Lin},
	title = {Bugram: Bug Detection with N-gram Language Models},
	booktitle = {Proceedings of the 31st IEEE/ACM International Conference on Automated Software Engineering},
	series = {ASE 2016},
	year = {2016},
	isbn = {978-1-4503-3845-5},
	location = {Singapore, Singapore},
	pages = {708--719},
	numpages = {12},
	url = {http://doi.acm.org/10.1145/2970276.2970341},
	doi = {10.1145/2970276.2970341},
	acmid = {2970341},
	publisher = {ACM},
	address = {New York, NY, USA},
	keywords = {Bug Detection, N-gram Language Model, Static Code Analysis},
} 

@inproceedings{Zhao-2018,
	author = {Zhao, Gang and Huang, Jeff},
	title = {DeepSim: Deep Learning Code Functional Similarity},
	booktitle = {Proceedings of the 26th ACM Joint Meeting on European Software Engineering Conference and Symposium on the Foundations of Software Engineering},
	series = {ESEC/FSE 2018},
	year = {2018},
	isbn = {978-1-4503-5573-5},
	location = {Lake Buena Vista, FL, USA},
	pages = {141--151},
	numpages = {11},
	url = {http://doi.acm.org/10.1145/3236024.3236068},
	doi = {10.1145/3236024.3236068},
	acmid = {3236068},
	publisher = {ACM},
	address = {New York, NY, USA},
	keywords = {Classification, Code functional similarity, Control/Data flow, Deep Learning},
} 

@article{Henkel-2018,
	author    = {Jordan Henkel and
	Shuvendu Lahiri and
	Ben Liblit and
	Thomas W. Reps},
	title     = {Code Vectors: Understanding Programs Through Embedded Abstracted Symbolic
	Traces},
	journal   = {CoRR},
	volume    = {abs/1803.06686},
	year      = {2018},
	url       = {http://arxiv.org/abs/1803.06686},
	archivePrefix = {arXiv},
	eprint    = {1803.06686},
	timestamp = {Mon, 13 Aug 2018 16:47:19 +0200},
	biburl    = {https://dblp.org/rec/bib/journals/corr/abs-1803-06686},
	bibsource = {dblp computer science bibliography, https://dblp.org}
}

@inproceedings{Tufano-2018,
	author = {Tufano, Michele and Watson, Cody and Bavota, Gabriele and Di Penta, Massimiliano and White, Martin and Poshyvanyk, Denys},
	title = {Deep Learning Similarities from Different Representations of Source Code},
	booktitle = {Proceedings of the 15th International Conference on Mining Software Repositories},
	series = {MSR '18},
	year = {2018},
	isbn = {978-1-4503-5716-6},
	location = {Gothenburg, Sweden},
	pages = {542--553},
	numpages = {12},
	url = {http://doi.acm.org/10.1145/3196398.3196431},
	doi = {10.1145/3196398.3196431},
	acmid = {3196431},
	publisher = {ACM},
	address = {New York, NY, USA},
	keywords = {code similarities, deep learning, neural networks},
} 

@article{Tai-2015,
	author    = {Kai Sheng Tai and
	Richard Socher and
	Christopher D. Manning},
	title     = {Improved Semantic Representations From Tree-Structured Long Short-Term
	Memory Networks},
	journal   = {CoRR},
	volume    = {abs/1503.00075},
	year      = {2015},
	url       = {http://arxiv.org/abs/1503.00075},
	archivePrefix = {arXiv},
	eprint    = {1503.00075},
	timestamp = {Mon, 13 Aug 2018 16:48:20 +0200},
	biburl    = {https://dblp.org/rec/bib/journals/corr/TaiSM15},
	bibsource = {dblp computer science bibliography, https://dblp.org}
}

@article{Engler-2001,
	author = {Engler, Dawson and Chen, David Yu and Hallem, Seth and Chou, Andy and Chelf, Benjamin},
	title = {Bugs As Deviant Behavior: A General Approach to Inferring Errors in Systems Code},
	journal = {SIGOPS Oper. Syst. Rev.},
	issue_date = {Dec. 2001},
	volume = {35},
	number = {5},
	month = oct,
	year = {2001},
	issn = {0163-5980},
	pages = {57--72},
	numpages = {16},
	url = {http://doi.acm.org/10.1145/502059.502041},
	doi = {10.1145/502059.502041},
	acmid = {502041},
	publisher = {ACM},
	address = {New York, NY, USA},
}

@article{Li-2005,
	author = {Li, Zhenmin and Zhou, Yuanyuan},
	title = {PR-Miner: Automatically Extracting Implicit Programming Rules and Detecting Violations in Large Software Code},
	journal = {SIGSOFT Softw. Eng. Notes},
	issue_date = {September 2005},
	volume = {30},
	number = {5},
	month = sep,
	year = {2005},
	issn = {0163-5948},
	pages = {306--315},
	numpages = {10},
	url = {http://doi.acm.org/10.1145/1095430.1081755},
	doi = {10.1145/1095430.1081755},
	acmid = {1081755},
	publisher = {ACM},
	address = {New York, NY, USA},
	keywords = {automated specification generation, automated violation detection, data mining for software engineering, pattern recognition, programming rules, static analysis},
} 

@inproceedings{Wasylkowski-2017,
	author = {Wasylkowski, Andrzej and Zeller, Andreas and Lindig, Christian},
	title = {Detecting Object Usage Anomalies},
	booktitle = {Proceedings of the the 6th Joint Meeting of the European Software Engineering Conference and the ACM SIGSOFT Symposium on The Foundations of Software Engineering},
	series = {ESEC-FSE '07},
	year = {2007},
	isbn = {978-1-59593-811-4},
	location = {Dubrovnik, Croatia},
	pages = {35--44},
	numpages = {10},
	url = {http://doi.acm.org/10.1145/1287624.1287632},
	doi = {10.1145/1287624.1287632},
	acmid = {1287632},
	publisher = {ACM},
	address = {New York, NY, USA},
	keywords = {automated defect detection, automated specification generation, data mining for software engineering, object usage anomalies, pattern recognition, programming rules, static analysis},
} 

@inproceedings{Nguyen-2009,
	author = {Nguyen, Tung Thanh and Nguyen, Hoan Anh and Pham, Nam H. and Al-Kofahi, Jafar M. and Nguyen, Tien N.},
	title = {Graph-based Mining of Multiple Object Usage Patterns},
	booktitle = {Proceedings of the the 7th Joint Meeting of the European Software Engineering Conference and the ACM SIGSOFT Symposium on The Foundations of Software Engineering},
	series = {ESEC/FSE '09},
	year = {2009},
	isbn = {978-1-60558-001-2},
	location = {Amsterdam, The Netherlands},
	pages = {383--392},
	numpages = {10},
	url = {http://doi.acm.org/10.1145/1595696.1595767},
	doi = {10.1145/1595696.1595767},
	acmid = {1595767},
	publisher = {ACM},
	address = {New York, NY, USA},
	keywords = {anomaly, api usage, clone, graph mining, groum, object usage, pattern},
} 

@InProceedings{Bielik-2016,
	title = 	 {PHOG: Probabilistic Model for Code},
	author = 	 {Pavol Bielik and Veselin Raychev and Martin Vechev},
	booktitle = 	 {Proceedings of The 33rd International Conference on Machine Learning},
	pages = 	 {2933--2942},
	year = 	 {2016},
	editor = 	 {Maria Florina Balcan and Kilian Q. Weinberger},
	volume = 	 {48},
	series = 	 {Proceedings of Machine Learning Research},
	address = 	 {New York, New York, USA},
	month = 	 {20--22 Jun},
	publisher = 	 {PMLR},
	pdf = 	 {http://proceedings.mlr.press/v48/bielik16.pdf},
	url = 	 {http://proceedings.mlr.press/v48/bielik16.html},
	abstract = 	 {We introduce a new generative model for code called probabilistic higher order grammar (PHOG). PHOG generalizes probabilistic context free grammars (PCFGs) by allowing conditioning of a production rule beyond the parent non-terminal, thus capturing rich contexts relevant to programs. Even though PHOG is more powerful than a PCFG, it can be learned from data just as efficiently. We trained a PHOG model on a large JavaScript code corpus and show that it is more precise than existing models, while similarly fast. As a result, PHOG can immediately benefit existing programming tools based on probabilistic models of code.}
}

@article{Bhatia-2016,
	author    = {Sahil Bhatia and
	Rishabh Singh},
	title     = {Automated Correction for Syntax Errors in Programming Assignments
	using Recurrent Neural Networks},
	journal   = {CoRR},
	volume    = {abs/1603.06129},
	year      = {2016},
	url       = {http://arxiv.org/abs/1603.06129},
	archivePrefix = {arXiv},
	eprint    = {1603.06129},
	timestamp = {Mon, 13 Aug 2018 16:46:25 +0200},
	biburl    = {https://dblp.org/rec/bib/journals/corr/BhatiaS16},
	bibsource = {dblp computer science bibliography, https://dblp.org}
}

@techreport{Patra-2016,
	title={Learning to Fuzz: Application-Independent Fuzz Testing with Probabilistic, Generative Models of Input Data},
	institution={TUD-CS-2016-14664, TU Darmstadt},
	author={Jibesh Patra and Michael Pradel},
	year={2016}
}

@article{Amodio-2017,
	author    = {Matthew Amodio and
	Swarat Chaudhuri and
	Thomas W. Reps},
	title     = {Neural Attribute Machines for Program Generation},
	journal   = {CoRR},
	volume    = {abs/1705.09231},
	year      = {2017},
	url       = {http://arxiv.org/abs/1705.09231},
	archivePrefix = {arXiv},
	eprint    = {1705.09231},
	timestamp = {Mon, 13 Aug 2018 16:46:40 +0200},
	biburl    = {https://dblp.org/rec/bib/journals/corr/AmodioCR17},
	bibsource = {dblp computer science bibliography, https://dblp.org}
}

@inproceedings{White-2016,
	author = {White, Martin and Tufano, Michele and Vendome, Christopher and Poshyvanyk, Denys},
	title = {Deep Learning Code Fragments for Code Clone Detection},
	booktitle = {Proceedings of the 31st IEEE/ACM International Conference on Automated Software Engineering},
	series = {ASE 2016},
	year = {2016},
	isbn = {978-1-4503-3845-5},
	location = {Singapore, Singapore},
	pages = {87--98},
	numpages = {12},
	url = {http://doi.acm.org/10.1145/2970276.2970326},
	doi = {10.1145/2970276.2970326},
	acmid = {2970326},
	publisher = {ACM},
	address = {New York, NY, USA},
	keywords = {abstract syntax trees, code clone detection, deep learning, language models, machine learning, neural networks},
} 

@article{Mou-2014,
	author    = {Lili Mou and
	Ge Li and
	Zhi Jin and
	Lu Zhang and
	Tao Wang},
	title     = {{TBCNN:} {A} Tree-Based Convolutional Neural Network for Programming
	Language Processing},
	journal   = {CoRR},
	volume    = {abs/1409.5718},
	year      = {2014},
	url       = {http://arxiv.org/abs/1409.5718},
	archivePrefix = {arXiv},
	eprint    = {1409.5718},
	timestamp = {Mon, 13 Aug 2018 16:47:17 +0200},
	biburl    = {https://dblp.org/rec/bib/journals/corr/MouLJZW14},
	bibsource = {dblp computer science bibliography, https://dblp.org}
}

@article{Allamanis-2017,
	author    = {Miltiadis Allamanis and
	Earl T. Barr and
	Premkumar T. Devanbu and
	Charles A. Sutton},
	title     = {A Survey of Machine Learning for Big Code and Naturalness},
	journal   = {CoRR},
	volume    = {abs/1709.06182},
	year      = {2017},
	url       = {http://arxiv.org/abs/1709.06182},
	archivePrefix = {arXiv},
	eprint    = {1709.06182},
	timestamp = {Mon, 13 Aug 2018 16:48:48 +0200},
	biburl    = {https://dblp.org/rec/bib/journals/corr/abs-1709-06182},
	bibsource = {dblp computer science bibliography, https://dblp.org}
}

@article{Allamanis-2016,
	author    = {Miltiadis Allamanis and
	Hao Peng and
	Charles A. Sutton},
	title     = {A Convolutional Attention Network for Extreme Summarization of Source
	Code},
	journal   = {CoRR},
	volume    = {abs/1602.03001},
	year      = {2016},
	url       = {http://arxiv.org/abs/1602.03001},
	archivePrefix = {arXiv},
	eprint    = {1602.03001},
	timestamp = {Mon, 13 Aug 2018 16:49:16 +0200},
	biburl    = {https://dblp.org/rec/bib/journals/corr/AllamanisPS16},
	bibsource = {dblp computer science bibliography, https://dblp.org}
}

@article{Allamanis-2017b,
	author    = {Miltiadis Allamanis and
	Marc Brockschmidt and
	Mahmoud Khademi},
	title     = {Learning to Represent Programs with Graphs},
	journal   = {CoRR},
	volume    = {abs/1711.00740},
	year      = {2017},
	url       = {http://arxiv.org/abs/1711.00740},
	archivePrefix = {arXiv},
	eprint    = {1711.00740},
	timestamp = {Mon, 13 Aug 2018 16:46:52 +0200},
	biburl    = {https://dblp.org/rec/bib/journals/corr/abs-1711-00740},
	bibsource = {dblp computer science bibliography, https://dblp.org}
}

@inproceedings{fase09,
	author = {Nguyen, Hoan Anh and Nguyen, Tung Thanh and Pham, Nam H. and Al-Kofahi, Jafar M. and Nguyen, Tien N.},
	title = {Accurate and Efficient Structural Characteristic Feature Extraction for Clone Detection},
	booktitle = {Proceedings of the 12th International Conference on Fundamental Approaches to Software Engineering: Held As Part of the Joint European Conferences on Theory and Practice of Software, ETAPS 2009},
	series = {FASE'09},
	year = {2009},
	pages = {440--455},
	publisher = {Springer-Verlag},
} 

@article{Jin-2012,
	author = {Jin, Guoliang and Song, Linhai and Shi, Xiaoming and Scherpelz, Joel and Lu, Shan},
	title = {Understanding and Detecting Real-world Performance Bugs},
	journal = {SIGPLAN Not.},
	issue_date = {June 2012},
	volume = {47},
	number = {6},
	month = jun,
	year = {2012},
	issn = {0362-1340},
	pages = {77--88},
	numpages = {12},
	url = {http://doi.acm.org/10.1145/2345156.2254075},
	doi = {10.1145/2345156.2254075},
	acmid = {2254075},
	publisher = {ACM},
	address = {New York, NY, USA},
	keywords = {characteristics study, performance bugs, rule-based bug detection},
} 

@article{Olivo-2015,
	author = {Olivo, Oswaldo and Dillig, Isil and Lin, Calvin},
	title = {Static Detection of Asymptotic Performance Bugs in Collection Traversals},
	journal = {SIGPLAN Not.},
	issue_date = {June 2015},
	volume = {50},
	number = {6},
	month = jun,
	year = {2015},
	issn = {0362-1340},
	pages = {369--378},
	numpages = {10},
	url = {http://doi.acm.org/10.1145/2813885.2737966},
	doi = {10.1145/2813885.2737966},
	acmid = {2737966},
	publisher = {ACM},
	address = {New York, NY, USA},
	keywords = {performance bugs, program analysis, static analysis},
} 

@article{Livshits-2005,
	author = {Livshits, Benjamin and Zimmermann, Thomas},
	title = {DynaMine: Finding Common Error Patterns by Mining Software Revision Histories},
	journal = {SIGSOFT Softw. Eng. Notes},
	issue_date = {September 2005},
	volume = {30},
	number = {5},
	month = sep,
	year = {2005},
	issn = {0163-5948},
	pages = {296--305},
	numpages = {10},
	url = {http://doi.acm.org/10.1145/1095430.1081754},
	doi = {10.1145/1095430.1081754},
	acmid = {1081754},
	publisher = {ACM},
	address = {New York, NY, USA},
	keywords = {coding patterns, data mining, dynamic analysis, error patterns, one-line check-ins, revision histories, software bugs},
} 

@inproceedings{Gruska-2010,
	author = {Gruska, Natalie and Wasylkowski, Andrzej and Zeller, Andreas},
	title = {Learning from 6,000 Projects: Lightweight Cross-project Anomaly Detection},
	booktitle = {Proceedings of the 19th International Symposium on Software Testing and Analysis},
	series = {ISSTA '10},
	year = {2010},
	isbn = {978-1-60558-823-0},
	location = {Trento, Italy},
	pages = {119--130},
	numpages = {12},
	url = {http://doi.acm.org/10.1145/1831708.1831723},
	doi = {10.1145/1831708.1831723},
	acmid = {1831723},
	publisher = {ACM},
	address = {New York, NY, USA},
	keywords = {formal concept analysis, language independent parsing, lightweight parsing, mining specifications, temporal properties},
} 

@inproceedings{Hindle-2012,
	author = {Hindle, Abram and Barr, Earl T. and Su, Zhendong and Gabel, Mark and Devanbu, Premkumar},
	title = {On the Naturalness of Software},
	booktitle = {Proceedings of the 34th International Conference on Software Engineering},
	series = {ICSE '12},
	year = {2012},
	isbn = {978-1-4673-1067-3},
	location = {Zurich, Switzerland},
	pages = {837--847},
	numpages = {11},
	url = {http://dl.acm.org/citation.cfm?id=2337223.2337322},
	acmid = {2337322},
	publisher = {IEEE Press},
	address = {Piscataway, NJ, USA},
} 

@article{Engler-2001,
	author = {Engler, Dawson and Chen, David Yu and Hallem, Seth and Chou, Andy and Chelf, Benjamin},
	title = {Bugs As Deviant Behavior: A General Approach to Inferring Errors in Systems Code},
	journal = {SIGOPS Oper. Syst. Rev.},
	issue_date = {Dec. 2001},
	volume = {35},
	number = {5},
	month = oct,
	year = {2001},
	issn = {0163-5980},
	pages = {57--72},
	numpages = {16},
	url = {http://doi.acm.org/10.1145/502059.502041},
	doi = {10.1145/502059.502041},
	acmid = {502041},
	publisher = {ACM},
	address = {New York, NY, USA},
} 

@inproceedings{Cole-2006,
	author = {Cole, Brian and Hakim, Daniel and Hovemeyer, David and Lazarus, Reuven and Pugh, William and Stephens, Kristin},
	title = {Improving Your Software Using Static Analysis to Find Bugs},
	booktitle = {Companion to the 21st ACM SIGPLAN Symposium on Object-oriented Programming Systems, Languages, and Applications},
	series = {OOPSLA '06},
	year = {2006},
	isbn = {1-59593-491-X},
	location = {Portland, Oregon, USA},
	pages = {673--674},
	numpages = {2},
	url = {http://doi.acm.org/10.1145/1176617.1176667},
	doi = {10.1145/1176617.1176667},
	acmid = {1176667},
	publisher = {ACM},
	address = {New York, NY, USA},
	keywords = {FindBugs, Java, static analysis},
} 

@InProceedings{Toman-2017,
	author =	{John Toman and Dan Grossman},
	title =	{{Taming the Static Analysis Beast}},
	booktitle =	{2nd Summit on Advances in Programming Languages (SNAPL 2017)},
	pages =	{18:1--18:14},
	series =	{Leibniz International Proceedings in Informatics (LIPIcs)},
	ISBN =	{978-3-95977-032-3},
	ISSN =	{1868-8969},
	year =	{2017},
	volume =	{71},
	editor =	{Benjamin S. Lerner and Rastislav Bod{\'i}k and Shriram Krishnamurthi},
	publisher =	{Schloss Dagstuhl--Leibniz-Zentrum fuer Informatik},
	address =	{Dagstuhl, Germany},
	URL =		{http://drops.dagstuhl.de/opus/volltexte/2017/7121},
	URN =		{urn:nbn:de:0030-drops-71213},
	doi =		{10.4230/LIPIcs.SNAPL.2017.18},
	annote =	{Keywords: static analysis, frameworks, api knowledge, library specifications}
}

@inproceedings{Smith-2009,
	title={Detecting and Measuring Similarity in Code Clones},
	author={Randy Smith and Susan Horwitz},
	year={2009}
}

@INPROCEEDINGS{Li-2017, 
	author={Liuqing Li and He Feng and Wenjie Zhuang and Na Meng and Barbara Ryder}, 
	booktitle={IEEE International Conference on Software Maintenance and Evolution (ICSME'17)}, 
	title={{CCLearner}: A Deep Learning-Based Clone Detection Approach}, 
	year={2017}, 
	volume={}, 
	number={}, 
	pages={249-260}, 
	keywords={learning (artificial intelligence);pattern classification;program debugging;program diagnostics;public domain software;software maintenance;software reusability;source code (software);trees (mathematics);competitive clone detection effectiveness;CCLearner;CCLEARNER;deep learning-based clone detection approach;software development;code reuse;programming productivity;software maintenance;bug fixes;program changes;code locations;clone detection tools;source code tokenization;tree-matching algorithms;abstract syntax trees;AST;token-based clone detection approach;method-level code clones;codebase;classifier training;BigCloneBench;Cloning;Feature extraction;Machine learning;Neural networks;Tools;Training;Testing;deep learning;clone detection;empirical}, 
	doi={10.1109/ICSME.2017.46}, 
	ISSN={}, 
	month={Sep.},}

@inproceedings{Wang-2016b,
	author = {Wang, Song and Liu, Taiyue and Tan, Lin},
	title = {Automatically Learning Semantic Features for Defect Prediction},
	booktitle = {Proceedings of the 38th International Conference on Software Engineering},
	series = {ICSE '16},
	year = {2016},
	isbn = {978-1-4503-3900-1},
	location = {Austin, Texas},
	pages = {297--308},
	numpages = {12},
	url = {http://doi.acm.org/10.1145/2884781.2884804},
	doi = {10.1145/2884781.2884804},
	acmid = {2884804},
	publisher = {ACM},
	address = {New York, NY, USA},
} 

@INPROCEEDINGS{Liang-2016, 
	author={Bin Liang and Pan Bian and Yan Zhang and Wenchang Shi and Wei You and Yan Cai}, 
	booktitle={2016 IEEE/ACM 38th International Conference on Software Engineering (ICSE)}, 
	title={AntMiner: Mining More Bugs by Reducing Noise Interference}, 
	year={2016}, 
	volume={}, 
	number={}, 
	pages={333-344}, 
	keywords={data mining;Linux;operating system kernels;program debugging;program slicing;AntMiner approach;noise interference reduction;bug detection;code mining;source code preprocessing;program slicing technique;semantics-equivalent representation;Linux kernel;Coverity tool;Computer bugs;Data mining;Kernel;Programming;Linux;Databases;Bug detection;Code mining;Program slicing}, 
	doi={10.1145/2884781.2884870}, 
	ISSN={1558-1225}, 
	month={May},}

@article{Kim-2018,
	author    = {Hyeji Kim and
	Yihan Jiang and
	Sreeram Kannan and
	Sewoong Oh and
	Pramod Viswanath},
	title     = {Deepcode: Feedback Codes via Deep Learning},
	journal   = {CoRR},
	volume    = {abs/1807.00801},
	year      = {2018},
	url       = {http://arxiv.org/abs/1807.00801},
	archivePrefix = {arXiv},
	eprint    = {1807.00801},
	timestamp = {Mon, 13 Aug 2018 16:48:32 +0200},
	biburl    = {https://dblp.org/rec/bib/journals/corr/abs-1807-00801},
	bibsource = {dblp computer science bibliography, https://dblp.org}
}

@inproceedings{Yang-2015,
	author = {Yang, Shuo and Luo, Ping and Loy, Chen Change and Shum, Kenneth W. and Tang, Xiaoou},
	title = {Deep Representation Learning with Target Coding},
	booktitle = {Proceedings of the Twenty-Ninth AAAI Conference on Artificial Intelligence},
	series = {AAAI'15},
	year = {2015},
	isbn = {0-262-51129-0},
	location = {Austin, Texas},
	pages = {3848--3854},
	numpages = {7},
	url = {http://dl.acm.org/citation.cfm?id=2888116.2888250},
	acmid = {2888250},
	publisher = {AAAI Press},
} 


@inproceedings{Nam-2015,
	author = {Nam, Jaechang and Kim, Sunghun},
	title = {Heterogeneous Defect Prediction},
	booktitle = {Proceedings of the 2015 10th Joint Meeting on Foundations of Software Engineering},
	series = {ESEC/FSE 2015},
	year = {2015},
	isbn = {978-1-4503-3675-8},
	location = {Bergamo, Italy},
	pages = {508--519},
	numpages = {12},
	url = {http://doi.acm.org/10.1145/2786805.2786814},
	doi = {10.1145/2786805.2786814},
	acmid = {2786814},
	publisher = {ACM},
	address = {New York, NY, USA},
	keywords = {Defect prediction, heterogeneous metrics, quality assurance},
}

@inproceedings{Hovemeyer-2007,
	author = {Hovemeyer, David and Pugh, William},
	title = {Finding More Null Pointer Bugs, but Not Too Many},
	booktitle = {Proceedings of the 7th ACM SIGPLAN-SIGSOFT Workshop on Program Analysis for Software Tools and Engineering},
	series = {PASTE '07},
	year = {2007},
	isbn = {978-1-59593-595-3},
	location = {San Diego, California, USA},
	pages = {9--14},
	numpages = {6},
	url = {http://doi.acm.org/10.1145/1251535.1251537},
	doi = {10.1145/1251535.1251537},
	acmid = {1251537},
	publisher = {ACM},
} 

@online{ProjectWebsite-2019,
	title = {The GitHub Repository for This Study},
	year = 2019,
	url = {https://github.com/OOPSLA-2019-BugDetection/OOPSLA-2019-BugDetection},
}

@inproceedings{word2vec,
	author    = {Tomas Mikolov and
	Ilya Sutskever and
	Kai Chen and
	Gregory S. Corrado and
	Jeffrey Dean},
	title     = {Distributed Representations of Words and Phrases and their Compositionality},
	booktitle = {27th Annual Conference on Neural Information Processing Systems 2013 (NIPS'13)},
	pages     = {3111--3119},
	year      = {2013},
}

@inproceedings{wan-ase18,
	author = {Wan, Yao and Zhao, Zhou and Yang, Min and Xu, Guandong and Ying, Haochao and Wu, Jian and Yu, Philip S.},
	title = {Improving Automatic Source Code Summarization via Deep Reinforcement Learning},
	booktitle = {Proceedings of the 33rd ACM/IEEE International Conference on Automated Software Engineering},
	series = {ASE 2018},
	year = {2018},
	pages = {397--407},
	publisher = {ACM},
}

@inproceedings{icse10,
	author = {Nguyen, Tung Thanh and Nguyen, Hoan Anh and Pham, Nam H. and Al-Kofahi, Jafar and Nguyen, Tien N.},
	title = {Recurring Bug Fixes in Object-oriented Programs},
	booktitle = {Proceedings of the 32Nd ACM/IEEE International Conference on Software Engineering - Volume 1},
	series = {ICSE '10},
	year = {2010},
	pages = {315--324},
	publisher = {ACM},
}

@inproceedings{ray-fse12,
	author = {Ray, Baishakhi and Kim, Miryung},
	title = {A Case Study of Cross-system Porting in Forked Projects},
	booktitle = {Proceedings of the ACM SIGSOFT 20th International Symposium on the Foundations of Software Engineering},
	series = {FSE '12},
	year = {2012},
	pages = {53:1--53:11},
	articleno = {53},
	publisher = {ACM},
}

@inproceedings{LeGoues-icse12,
	author = {Le Goues, Claire and Dewey-Vogt, Michael and Forrest, Stephanie and Weimer, Westley},
	title = {A Systematic Study of Automated Program Repair: Fixing 55 out of 105 Bugs for \$8 Each},
	booktitle = {Proceedings of the 34th International Conference on Software Engineering},
	series = {ICSE '12},
	year = {2012},
	pages = {3--13},
	publisher = {IEEE Press},
}

@inproceedings{tbar-issta19,
	author = {Liu, Kui and Koyuncu, Anil and Kim, Dongsun and Bissyand{\'e}, Tegawend{\'e} F.},
	title = {TBar: Revisiting Template-based Automated Program Repair},
	booktitle = {Proceedings of the 28th ACM SIGSOFT International Symposium on Software Testing and Analysis},
	series = {ISSTA 2019},
	year = {2019},
	pages = {31--42},
	publisher = {ACM},
}

@article{codit,
	author    = {Saikat Chakraborty and
	Miltiadis Allamanis and
	Baishakhi Ray},
	title     = {Tree2Tree Neural Translation Model for Learning Source Code Changes},
	journal   = {CoRR},
	volume    = {abs/1810.00314},
	year      = {2018},
	url       = {http://arxiv.org/abs/1810.00314},
	archivePrefix = {arXiv},
	eprint    = {1810.00314},
	biburl    = {https://dblp.org/rec/bib/journals/corr/abs-1810-00314},
	bibsource = {dblp computer science bibliography, https://dblp.org}
}

@inproceedings{saha2018bugs,
	title={Bugs. jar: A large-scale, diverse dataset of real-world Java bugs},
	author={Saha, Ripon and Lyu, Yingjun and Lam, Wing and Yoshida, Hiroaki and Prasad, Mukul},
	booktitle={2018 IEEE/ACM 15th International Conference on Mining Software Repositories (MSR)},
	pages={10--13},
	year={2018},
	organization={IEEE}
}
@online{AutoFix2019,
	title = {The GitHub Repository for This Study},
	year = 2019,
	url = {https://github.com/ICSE-2019-AUTOFIX/ICSE-2019-AUTOFIX},
}

@online{defects4j,
	title = {The Defects4J Data Set},
	year = 2019,
	url = {https://github.com/rjust/defects4j},
}
@Misc{soot,
	howpublished = {\url{https://sable.github.io/soot/}},
	note = {Last Accessed July 11, 2019},
	title = {Soot Introduction.},
	author = {Soot}
}

@Misc{WALA,
	howpublished = {\url{http://wala.sourceforge.net/wiki/index.php/Main_Page}},
	note = {Last Accessed July 11, 2019},
	title = {WALA Documentation.},
	author = {WALA}
}




@article{alon2018code2seq,
	title={code2seq: Generating sequences from structured representations of code},
	author={Alon, Uri and Brody, Shaked and Levy, Omer and Yahav, Eran},
	journal={arXiv preprint arXiv:1808.01400},
	year={2018}
}

@inproceedings{Kildall-1973,
	title={A unified approach to global program optimization},
	author={Kildall, Gary A},
	booktitle={Proceedings of the 1st annual ACM SIGACT-SIGPLAN symposium on Principles of programming languages},
	pages={194--206},
	year={1973},
	organization={ACM}
}

@inproceedings{ayewah-2007,
	title={Evaluating static analysis defect warnings on production software},
	author={Ayewah, Nathaniel and Pugh, William and Morgenthaler, J David and Penix, John and Zhou, YuQian},
	booktitle={Proceedings of the 7th ACM SIGPLAN-SIGSOFT workshop on Program analysis for software tools and engineering},
	pages={1--8},
	year={2007},
	organization={ACM}
}

@inproceedings{dagenais-2008,
	title={Enabling static analysis for partial java programs},
	author={Dagenais, Barth{\'e}l{\'e}my and Hendren, Laurie},
	booktitle={ACM Sigplan Notices},
	volume={43},
	number={10},
	pages={313--328},
	year={2008},
	organization={ACM}
}

@inproceedings{mockus-2000,
	title={Identifying Reasons for Software Changes using Historic Databases.},
	author={Mockus, Audris and Votta, Lawrence G},
	booktitle={icsm},
	pages={120--130},
	year={2000}
}

@inproceedings{krizhevsky-2012,
	title={Imagenet classification with deep convolutional neural networks},
	author={Krizhevsky, Alex and Sutskever, Ilya and Hinton, Geoffrey E},
	booktitle={Advances in neural information processing systems},
	pages={1097--1105},
	year={2012}
}

@inproceedings{ray-2014,
	title={A large scale study of programming languages and code quality in github},
	author={Ray, Baishakhi and Posnett, Daryl and Filkov, Vladimir and Devanbu, Premkumar},
	booktitle={Proceedings of the 22nd ACM SIGSOFT International Symposium on Foundations of Software Engineering},
	pages={155--165},
	year={2014},
	organization={ACM}
}

@inproceedings{ray-2016,
	title={On the" naturalness" of buggy code},
	author={Ray, Baishakhi and Hellendoorn, Vincent and Godhane, Saheel and Tu, Zhaopeng and Bacchelli, Alberto and Devanbu, Premkumar},
	booktitle={2016 IEEE/ACM 38th International Conference on Software Engineering (ICSE)},
	pages={428--439},
	year={2016},
	organization={IEEE}
}

@inproceedings{Bian-2018,
	author = {Bian, Pan and Liang, Bin and Shi, Wenchang and Huang, Jianjun and Cai, Yan},
	title = {NAR-miner: Discovering Negative Association Rules from Code for Bug Detection},
	booktitle = {Proceedings of the 2018 26th ACM Joint Meeting on European Software Engineering Conference and Symposium on the Foundations of Software Engineering},
	series = {ESEC/FSE 2018},
	year = {2018},
	isbn = {978-1-4503-5573-5},
	location = {Lake Buena Vista, FL, USA},
	pages = {411--422},
	numpages = {12},
	url = {http://doi.acm.org/10.1145/3236024.3236032},
	doi = {10.1145/3236024.3236032},
	acmid = {3236032},
	publisher = {ACM},
	address = {New York, NY, USA},
	keywords = {Bug Detection, Code Mining, Negative Rule, Rule Explosion},
} 

@article{Pradel-2018,
	author    = {Michael Pradel and
	Koushik Sen},
	title     = {DeepBugs: {A} Learning Approach to Name-based Bug Detection},
	journal   = {CoRR},
	volume    = {abs/1805.11683},
	year      = {2018},
	url       = {http://arxiv.org/abs/1805.11683},
	archivePrefix = {arXiv},
	eprint    = {1805.11683},
	timestamp = {Mon, 13 Aug 2018 16:47:27 +0200},
	biburl    = {https://dblp.org/rec/bib/journals/corr/abs-1805-11683},
	bibsource = {dblp computer science bibliography, https://dblp.org}
}

@article{Alon-2018,
	author    = {Uri Alon and
	Meital Zilberstein and
	Omer Levy and
	Eran Yahav},
	title     = {code2vec: Learning Distributed Representations of Code},
	journal   = {CoRR},
	volume    = {abs/1803.09473},
	year      = {2018},
	url       = {http://arxiv.org/abs/1803.09473},
	archivePrefix = {arXiv},
	eprint    = {1803.09473},
	timestamp = {Mon, 13 Aug 2018 16:47:34 +0200},
	biburl    = {https://dblp.org/rec/bib/journals/corr/abs-1803-09473},
	bibsource = {dblp computer science bibliography, https://dblp.org}
}

@article{Ferrante-1987,
	author = {Ferrante, Jeanne and Ottenstein, Karl J. and Warren, Joe D.},
	title = {The Program Dependence Graph and Its Use in Optimization},
	journal = {ACM Trans. Program. Lang. Syst.},
	issue_date = {July 1987},
	volume = {9},
	number = {3},
	month = jul,
	year = {1987},
	issn = {0164-0925},
	pages = {319--349},
	numpages = {31},
	url = {http://doi.acm.org/10.1145/24039.24041},
	doi = {10.1145/24039.24041},
	acmid = {24041},
	publisher = {ACM},
	address = {New York, NY, USA},
} 

@inproceedings{Edward-1975,
	author = {Yourdon, Edward},
	title = {Structured Programming and Structured Design As Art Forms},
	booktitle = {Proceedings of the May 19-22, 1975, National Computer Conference and Exposition},
	series = {AFIPS '75},
	year = {1975},
	location = {Anaheim, California},
	pages = {277--277},
	numpages = {1},
	url = {http://doi.acm.org/10.1145/1499949.1499997},
	doi = {10.1145/1499949.1499997},
	acmid = {1499997},
	publisher = {ACM},
	address = {New York, NY, USA},
} 

@article{Cho-2014,
	author    = {Kyunghyun Cho and
	Bart van Merrienboer and
	{\c{C}}aglar G{\"{u}}l{\c{c}}ehre and
	Fethi Bougares and
	Holger Schwenk and
	Yoshua Bengio},
	title     = {Learning Phrase Representations using {RNN} Encoder-Decoder for Statistical
	Machine Translation},
	journal   = {CoRR},
	volume    = {abs/1406.1078},
	year      = {2014},
	url       = {http://arxiv.org/abs/1406.1078},
	archivePrefix = {arXiv},
	eprint    = {1406.1078},
	timestamp = {Mon, 13 Aug 2018 16:46:44 +0200},
	biburl    = {https://dblp.org/rec/bib/journals/corr/ChoMGBSB14},
	bibsource = {dblp computer science bibliography, https://dblp.org}
}

@article{Yin-2016,
	author    = {Wenpeng Yin and
	Hinrich Sch{\"{u}}tze and
	Bing Xiang and
	Bowen Zhou},
	title     = {{ABCNN:} Attention-Based Convolutional Neural Network for Modeling
	Sentence Pairs},
	journal   = {CoRR},
	volume    = {abs/1512.05193},
	year      = {2015},
	url       = {http://arxiv.org/abs/1512.05193},
	archivePrefix = {arXiv},
	eprint    = {1512.05193},
	timestamp = {Mon, 13 Aug 2018 16:47:36 +0200},
	biburl    = {https://dblp.org/rec/bib/journals/corr/YinSXZ15},
	bibsource = {dblp computer science bibliography, https://dblp.org}
}

@article{Grover-2016,
	author    = {Aditya Grover and
	Jure Leskovec},
	title     = {node2vec: Scalable Feature Learning for Networks},
	journal   = {CoRR},
	volume    = {abs/1607.00653},
	year      = {2016},
	url       = {http://arxiv.org/abs/1607.00653},
	archivePrefix = {arXiv},
	eprint    = {1607.00653},
	timestamp = {Mon, 13 Aug 2018 16:48:14 +0200},
	biburl    = {https://dblp.org/rec/bib/journals/corr/GroverL16},
	bibsource = {dblp computer science bibliography, https://dblp.org}
}

@article{Mikolov-2013,
	author    = {Tomas Mikolov and
	Ilya Sutskever and
	Kai Chen and
	Greg Corrado and
	Jeffrey Dean},
	title     = {Distributed Representations of Words and Phrases and their Compositionality},
	journal   = {CoRR},
	volume    = {abs/1310.4546},
	year      = {2013},
	url       = {http://arxiv.org/abs/1310.4546},
	archivePrefix = {arXiv},
	eprint    = {1310.4546},
	timestamp = {Mon, 13 Aug 2018 16:47:09 +0200},
	biburl    = {https://dblp.org/rec/bib/journals/corr/MikolovSCCD13},
	bibsource = {dblp computer science bibliography, https://dblp.org}
}

@incollection{LeCun-1989,
	author = {Cun, Yann Le and Galland, Conrad C. and Hinton, Geoffrey E.},
	chapter = {GEMINI: Gradient Estimation Through Matrix Inversion After Noise Injection},
	title = {Advances in Neural Information Processing Systems 1},
	editor = {Touretzky, David S.},
	year = {1989},
	isbn = {1-558-60015-9},
	pages = {141--148},
	numpages = {8},
	url = {http://dl.acm.org/citation.cfm?id=89851.89868},
	acmid = {89868},
	publisher = {Morgan Kaufmann Publishers Inc.},
	address = {San Francisco, CA, USA},
} 

@article{Vaswani-2017,
	author    = {Ashish Vaswani and
	Noam Shazeer and
	Niki Parmar and
	Jakob Uszkoreit and
	Llion Jones and
	Aidan N. Gomez and
	Lukasz Kaiser and
	Illia Polosukhin},
	title     = {Attention Is All You Need},
	journal   = {CoRR},
	volume    = {abs/1706.03762},
	year      = {2017},
	url       = {http://arxiv.org/abs/1706.03762},
	archivePrefix = {arXiv},
	eprint    = {1706.03762},
	timestamp = {Mon, 13 Aug 2018 16:48:37 +0200},
	biburl    = {https://dblp.org/rec/bib/journals/corr/VaswaniSPUJGKP17},
	bibsource = {dblp computer science bibliography, https://dblp.org}
}

@article{Allen-1970,
	author = {Allen, Frances E.},
	title = {Control Flow Analysis},
	journal = {SIGPLAN Not.},
	issue_date = {July 1970},
	volume = {5},
	number = {7},
	month = jul,
	year = {1970},
	issn = {0362-1340},
	pages = {1--19},
	numpages = {19},
	url = {http://doi.acm.org/10.1145/390013.808479},
	doi = {10.1145/390013.808479},
	acmid = {808479},
	publisher = {ACM},
	address = {New York, NY, USA},
} 

@ARTICLE{Callahan-1990, 
	author={D. {Callahan} and A. {Carle} and M. W. {Hall} and K. {Kennedy}}, 
	journal={IEEE Transactions on Software Engineering}, 
	title={Constructing the procedure call multigraph}, 
	year={1990}, 
	volume={16}, 
	number={4}, 
	pages={483-487}, 
	keywords={parallel programming;procedure call multigraph;algorithm;precise call multigraph;recursion;upper bound;polynomial;Throughput;Delay;Databases;Concurrency control;Flow graphs;Information retrieval;Erbium;Etching;Upper bound}, 
	doi={10.1109/32.54302}, 
	ISSN={0098-5589}, 
	month={April},}

@inproceedings{Wang-2016,
	author = {Wang, Song and Chollak, Devin and Movshovitz-Attias, Dana and Tan, Lin},
	title = {Bugram: Bug Detection with N-gram Language Models},
	booktitle = {Proceedings of the 31st IEEE/ACM International Conference on Automated Software Engineering},
	series = {ASE 2016},
	year = {2016},
	isbn = {978-1-4503-3845-5},
	location = {Singapore, Singapore},
	pages = {708--719},
	numpages = {12},
	url = {http://doi.acm.org/10.1145/2970276.2970341},
	doi = {10.1145/2970276.2970341},
	acmid = {2970341},
	publisher = {ACM},
	address = {New York, NY, USA},
	keywords = {Bug Detection, N-gram Language Model, Static Code Analysis},
} 

@inproceedings{Zhao-2018,
	author = {Zhao, Gang and Huang, Jeff},
	title = {DeepSim: Deep Learning Code Functional Similarity},
	booktitle = {Proceedings of the 2018 26th ACM Joint Meeting on European Software Engineering Conference and Symposium on the Foundations of Software Engineering},
	series = {ESEC/FSE 2018},
	year = {2018},
	isbn = {978-1-4503-5573-5},
	location = {Lake Buena Vista, FL, USA},
	pages = {141--151},
	numpages = {11},
	url = {http://doi.acm.org/10.1145/3236024.3236068},
	doi = {10.1145/3236024.3236068},
	acmid = {3236068},
	publisher = {ACM},
	address = {New York, NY, USA},
	keywords = {Classification, Code functional similarity, Control/Data flow, Deep Learning},
} 

@article{Henkel-2018,
	author    = {Jordan Henkel and
	Shuvendu Lahiri and
	Ben Liblit and
	Thomas W. Reps},
	title     = {Code Vectors: Understanding Programs Through Embedded Abstracted Symbolic
	Traces},
	journal   = {CoRR},
	volume    = {abs/1803.06686},
	year      = {2018},
	url       = {http://arxiv.org/abs/1803.06686},
	archivePrefix = {arXiv},
	eprint    = {1803.06686},
	timestamp = {Mon, 13 Aug 2018 16:47:19 +0200},
	biburl    = {https://dblp.org/rec/bib/journals/corr/abs-1803-06686},
	bibsource = {dblp computer science bibliography, https://dblp.org}
}

@inproceedings{Tufano-2018,
	author = {Tufano, Michele and Watson, Cody and Bavota, Gabriele and Di Penta, Massimiliano and White, Martin and Poshyvanyk, Denys},
	title = {Deep Learning Similarities from Different Representations of Source Code},
	booktitle = {Proceedings of the 15th International Conference on Mining Software Repositories},
	series = {MSR '18},
	year = {2018},
	isbn = {978-1-4503-5716-6},
	location = {Gothenburg, Sweden},
	pages = {542--553},
	numpages = {12},
	url = {http://doi.acm.org/10.1145/3196398.3196431},
	doi = {10.1145/3196398.3196431},
	acmid = {3196431},
	publisher = {ACM},
	address = {New York, NY, USA},
	keywords = {code similarities, deep learning, neural networks},
} 

@article{Tai-2015,
	author    = {Kai Sheng Tai and
	Richard Socher and
	Christopher D. Manning},
	title     = {Improved Semantic Representations From Tree-Structured Long Short-Term
	Memory Networks},
	journal   = {CoRR},
	volume    = {abs/1503.00075},
	year      = {2015},
	url       = {http://arxiv.org/abs/1503.00075},
	archivePrefix = {arXiv},
	eprint    = {1503.00075},
	timestamp = {Mon, 13 Aug 2018 16:48:20 +0200},
	biburl    = {https://dblp.org/rec/bib/journals/corr/TaiSM15},
	bibsource = {dblp computer science bibliography, https://dblp.org}
}

@article{Engler-2001,
	author = {Engler, Dawson and Chen, David Yu and Hallem, Seth and Chou, Andy and Chelf, Benjamin},
	title = {Bugs As Deviant Behavior: A General Approach to Inferring Errors in Systems Code},
	journal = {SIGOPS Oper. Syst. Rev.},
	issue_date = {Dec. 2001},
	volume = {35},
	number = {5},
	month = oct,
	year = {2001},
	issn = {0163-5980},
	pages = {57--72},
	numpages = {16},
	url = {http://doi.acm.org/10.1145/502059.502041},
	doi = {10.1145/502059.502041},
	acmid = {502041},
	publisher = {ACM},
	address = {New York, NY, USA},
}

@article{Li-2005,
	author = {Li, Zhenmin and Zhou, Yuanyuan},
	title = {PR-Miner: Automatically Extracting Implicit Programming Rules and Detecting Violations in Large Software Code},
	journal = {SIGSOFT Softw. Eng. Notes},
	issue_date = {September 2005},
	volume = {30},
	number = {5},
	month = sep,
	year = {2005},
	issn = {0163-5948},
	pages = {306--315},
	numpages = {10},
	url = {http://doi.acm.org/10.1145/1095430.1081755},
	doi = {10.1145/1095430.1081755},
	acmid = {1081755},
	publisher = {ACM},
	address = {New York, NY, USA},
	keywords = {automated specification generation, automated violation detection, data mining for software engineering, pattern recognition, programming rules, static analysis},
} 

@inproceedings{Wasylkowski-2017,
	author = {Wasylkowski, Andrzej and Zeller, Andreas and Lindig, Christian},
	title = {Detecting Object Usage Anomalies},
	booktitle = {Proceedings of the the 6th Joint Meeting of the European Software Engineering Conference and the ACM SIGSOFT Symposium on The Foundations of Software Engineering},
	series = {ESEC-FSE '07},
	year = {2007},
	isbn = {978-1-59593-811-4},
	location = {Dubrovnik, Croatia},
	pages = {35--44},
	numpages = {10},
	url = {http://doi.acm.org/10.1145/1287624.1287632},
	doi = {10.1145/1287624.1287632},
	acmid = {1287632},
	publisher = {ACM},
	address = {New York, NY, USA},
	keywords = {automated defect detection, automated specification generation, data mining for software engineering, object usage anomalies, pattern recognition, programming rules, static analysis},
} 

@inproceedings{Nguyen-2009,
	author = {Nguyen, Tung Thanh and Nguyen, Hoan Anh and Pham, Nam H. and Al-Kofahi, Jafar M. and Nguyen, Tien N.},
	title = {Graph-based Mining of Multiple Object Usage Patterns},
	booktitle = {Proceedings of the the 7th Joint Meeting of the European Software Engineering Conference and the ACM SIGSOFT Symposium on The Foundations of Software Engineering},
	series = {ESEC/FSE '09},
	year = {2009},
	isbn = {978-1-60558-001-2},
	location = {Amsterdam, The Netherlands},
	pages = {383--392},
	numpages = {10},
	url = {http://doi.acm.org/10.1145/1595696.1595767},
	doi = {10.1145/1595696.1595767},
	acmid = {1595767},
	publisher = {ACM},
	address = {New York, NY, USA},
	keywords = {anomaly, api usage, clone, graph mining, groum, object usage, pattern},
} 

@InProceedings{Bielik-2016,
	title = 	 {PHOG: Probabilistic Model for Code},
	author = 	 {Pavol Bielik and Veselin Raychev and Martin Vechev},
	booktitle = 	 {Proceedings of The 33rd International Conference on Machine Learning},
	pages = 	 {2933--2942},
	year = 	 {2016},
	editor = 	 {Maria Florina Balcan and Kilian Q. Weinberger},
	volume = 	 {48},
	series = 	 {Proceedings of Machine Learning Research},
	address = 	 {New York, New York, USA},
	month = 	 {20--22 Jun},
	publisher = 	 {PMLR},
	pdf = 	 {http://proceedings.mlr.press/v48/bielik16.pdf},
	url = 	 {http://proceedings.mlr.press/v48/bielik16.html},
	abstract = 	 {We introduce a new generative model for code called probabilistic higher order grammar (PHOG). PHOG generalizes probabilistic context free grammars (PCFGs) by allowing conditioning of a production rule beyond the parent non-terminal, thus capturing rich contexts relevant to programs. Even though PHOG is more powerful than a PCFG, it can be learned from data just as efficiently. We trained a PHOG model on a large JavaScript code corpus and show that it is more precise than existing models, while similarly fast. As a result, PHOG can immediately benefit existing programming tools based on probabilistic models of code.}
}

@article{Bhatia-2016,
	author    = {Sahil Bhatia and
	Rishabh Singh},
	title     = {Automated Correction for Syntax Errors in Programming Assignments
	using Recurrent Neural Networks},
	journal   = {CoRR},
	volume    = {abs/1603.06129},
	year      = {2016},
	url       = {http://arxiv.org/abs/1603.06129},
	archivePrefix = {arXiv},
	eprint    = {1603.06129},
	timestamp = {Mon, 13 Aug 2018 16:46:25 +0200},
	biburl    = {https://dblp.org/rec/bib/journals/corr/BhatiaS16},
	bibsource = {dblp computer science bibliography, https://dblp.org}
}

@inproceedings{Patra-2016,
	title={Learning to Fuzz: Application-Independent Fuzz Testing with Probabilistic, Generative Models of Input Data},
	author={Jibesh Patra and Michael Pradel},
	year={2016}
}

@article{Amodio-2017,
	author    = {Matthew Amodio and
	Swarat Chaudhuri and
	Thomas W. Reps},
	title     = {Neural Attribute Machines for Program Generation},
	journal   = {CoRR},
	volume    = {abs/1705.09231},
	year      = {2017},
	url       = {http://arxiv.org/abs/1705.09231},
	archivePrefix = {arXiv},
	eprint    = {1705.09231},
	timestamp = {Mon, 13 Aug 2018 16:46:40 +0200},
	biburl    = {https://dblp.org/rec/bib/journals/corr/AmodioCR17},
	bibsource = {dblp computer science bibliography, https://dblp.org}
}

@inproceedings{White-2016,
	author = {White, Martin and Tufano, Michele and Vendome, Christopher and Poshyvanyk, Denys},
	title = {Deep Learning Code Fragments for Code Clone Detection},
	booktitle = {Proceedings of the 31st IEEE/ACM International Conference on Automated Software Engineering},
	series = {ASE 2016},
	year = {2016},
	isbn = {978-1-4503-3845-5},
	location = {Singapore, Singapore},
	pages = {87--98},
	numpages = {12},
	url = {http://doi.acm.org/10.1145/2970276.2970326},
	doi = {10.1145/2970276.2970326},
	acmid = {2970326},
	publisher = {ACM},
	address = {New York, NY, USA},
	keywords = {abstract syntax trees, code clone detection, deep learning, language models, machine learning, neural networks},
} 

@article{Mou-2014,
	author    = {Lili Mou and
	Ge Li and
	Zhi Jin and
	Lu Zhang and
	Tao Wang},
	title     = {{TBCNN:} {A} Tree-Based Convolutional Neural Network for Programming
	Language Processing},
	journal   = {CoRR},
	volume    = {abs/1409.5718},
	year      = {2014},
	url       = {http://arxiv.org/abs/1409.5718},
	archivePrefix = {arXiv},
	eprint    = {1409.5718},
	timestamp = {Mon, 13 Aug 2018 16:47:17 +0200},
	biburl    = {https://dblp.org/rec/bib/journals/corr/MouLJZW14},
	bibsource = {dblp computer science bibliography, https://dblp.org}
}

@article{Allamanis-2017,
	author    = {Miltiadis Allamanis and
	Earl T. Barr and
	Premkumar T. Devanbu and
	Charles A. Sutton},
	title     = {A Survey of Machine Learning for Big Code and Naturalness},
	journal   = {CoRR},
	volume    = {abs/1709.06182},
	year      = {2017},
	url       = {http://arxiv.org/abs/1709.06182},
	archivePrefix = {arXiv},
	eprint    = {1709.06182},
	timestamp = {Mon, 13 Aug 2018 16:48:48 +0200},
	biburl    = {https://dblp.org/rec/bib/journals/corr/abs-1709-06182},
	bibsource = {dblp computer science bibliography, https://dblp.org}
}

@article{Allamanis-2016,
	author    = {Miltiadis Allamanis and
	Hao Peng and
	Charles A. Sutton},
	title     = {A Convolutional Attention Network for Extreme Summarization of Source
	Code},
	journal   = {CoRR},
	volume    = {abs/1602.03001},
	year      = {2016},
	url       = {http://arxiv.org/abs/1602.03001},
	archivePrefix = {arXiv},
	eprint    = {1602.03001},
	timestamp = {Mon, 13 Aug 2018 16:49:16 +0200},
	biburl    = {https://dblp.org/rec/bib/journals/corr/AllamanisPS16},
	bibsource = {dblp computer science bibliography, https://dblp.org}
}

@article{Allamanis-2017b,
	author    = {Miltiadis Allamanis and
	Marc Brockschmidt and
	Mahmoud Khademi},
	title     = {Learning to Represent Programs with Graphs},
	journal   = {CoRR},
	volume    = {abs/1711.00740},
	year      = {2017},
	url       = {http://arxiv.org/abs/1711.00740},
	archivePrefix = {arXiv},
	eprint    = {1711.00740},
	timestamp = {Mon, 13 Aug 2018 16:46:52 +0200},
	biburl    = {https://dblp.org/rec/bib/journals/corr/abs-1711-00740},
	bibsource = {dblp computer science bibliography, https://dblp.org}
}

@inproceedings{fase09,
	author = {Nguyen, Hoan Anh and Nguyen, Tung Thanh and Pham, Nam H. and Al-Kofahi, Jafar M. and Nguyen, Tien N.},
	title = {Accurate and Efficient Structural Characteristic Feature Extraction for Clone Detection},
	booktitle = {Proceedings of the 12th International Conference on Fundamental Approaches to Software Engineering: Held As Part of the Joint European Conferences on Theory and Practice of Software, ETAPS 2009},
	series = {FASE'09},
	year = {2009},
	pages = {440--455},
	publisher = {Springer-Verlag},
} 

@article{Jin-2012,
	author = {Jin, Guoliang and Song, Linhai and Shi, Xiaoming and Scherpelz, Joel and Lu, Shan},
	title = {Understanding and Detecting Real-world Performance Bugs},
	journal = {SIGPLAN Not.},
	issue_date = {June 2012},
	volume = {47},
	number = {6},
	month = jun,
	year = {2012},
	issn = {0362-1340},
	pages = {77--88},
	numpages = {12},
	url = {http://doi.acm.org/10.1145/2345156.2254075},
	doi = {10.1145/2345156.2254075},
	acmid = {2254075},
	publisher = {ACM},
	address = {New York, NY, USA},
	keywords = {characteristics study, performance bugs, rule-based bug detection},
} 

@article{Olivo-2015,
	author = {Olivo, Oswaldo and Dillig, Isil and Lin, Calvin},
	title = {Static Detection of Asymptotic Performance Bugs in Collection Traversals},
	journal = {SIGPLAN Not.},
	issue_date = {June 2015},
	volume = {50},
	number = {6},
	month = jun,
	year = {2015},
	issn = {0362-1340},
	pages = {369--378},
	numpages = {10},
	url = {http://doi.acm.org/10.1145/2813885.2737966},
	doi = {10.1145/2813885.2737966},
	acmid = {2737966},
	publisher = {ACM},
	address = {New York, NY, USA},
	keywords = {performance bugs, program analysis, static analysis},
} 

@article{Livshits-2005,
	author = {Livshits, Benjamin and Zimmermann, Thomas},
	title = {DynaMine: Finding Common Error Patterns by Mining Software Revision Histories},
	journal = {SIGSOFT Softw. Eng. Notes},
	issue_date = {September 2005},
	volume = {30},
	number = {5},
	month = sep,
	year = {2005},
	issn = {0163-5948},
	pages = {296--305},
	numpages = {10},
	url = {http://doi.acm.org/10.1145/1095430.1081754},
	doi = {10.1145/1095430.1081754},
	acmid = {1081754},
	publisher = {ACM},
	address = {New York, NY, USA},
	keywords = {coding patterns, data mining, dynamic analysis, error patterns, one-line check-ins, revision histories, software bugs},
} 

@inproceedings{Gruska-2010,
	author = {Gruska, Natalie and Wasylkowski, Andrzej and Zeller, Andreas},
	title = {Learning from 6,000 Projects: Lightweight Cross-project Anomaly Detection},
	booktitle = {Proceedings of the 19th International Symposium on Software Testing and Analysis},
	series = {ISSTA '10},
	year = {2010},
	isbn = {978-1-60558-823-0},
	location = {Trento, Italy},
	pages = {119--130},
	numpages = {12},
	url = {http://doi.acm.org/10.1145/1831708.1831723},
	doi = {10.1145/1831708.1831723},
	acmid = {1831723},
	publisher = {ACM},
	address = {New York, NY, USA},
	keywords = {formal concept analysis, language independent parsing, lightweight parsing, mining specifications, temporal properties},
} 

@inproceedings{Hindle-2012,
	author = {Hindle, Abram and Barr, Earl T. and Su, Zhendong and Gabel, Mark and Devanbu, Premkumar},
	title = {On the Naturalness of Software},
	booktitle = {Proceedings of the 34th International Conference on Software Engineering},
	series = {ICSE '12},
	year = {2012},
	isbn = {978-1-4673-1067-3},
	location = {Zurich, Switzerland},
	pages = {837--847},
	numpages = {11},
	url = {http://dl.acm.org/citation.cfm?id=2337223.2337322},
	acmid = {2337322},
	publisher = {IEEE Press},
	address = {Piscataway, NJ, USA},
} 

@article{Engler-2001,
	author = {Engler, Dawson and Chen, David Yu and Hallem, Seth and Chou, Andy and Chelf, Benjamin},
	title = {Bugs As Deviant Behavior: A General Approach to Inferring Errors in Systems Code},
	journal = {SIGOPS Oper. Syst. Rev.},
	issue_date = {Dec. 2001},
	volume = {35},
	number = {5},
	month = oct,
	year = {2001},
	issn = {0163-5980},
	pages = {57--72},
	numpages = {16},
	url = {http://doi.acm.org/10.1145/502059.502041},
	doi = {10.1145/502059.502041},
	acmid = {502041},
	publisher = {ACM},
	address = {New York, NY, USA},
} 

@inproceedings{Cole-2006,
	author = {Cole, Brian and Hakim, Daniel and Hovemeyer, David and Lazarus, Reuven and Pugh, William and Stephens, Kristin},
	title = {Improving Your Software Using Static Analysis to Find Bugs},
	booktitle = {Companion to the 21st ACM SIGPLAN Symposium on Object-oriented Programming Systems, Languages, and Applications},
	series = {OOPSLA '06},
	year = {2006},
	isbn = {1-59593-491-X},
	location = {Portland, Oregon, USA},
	pages = {673--674},
	numpages = {2},
	url = {http://doi.acm.org/10.1145/1176617.1176667},
	doi = {10.1145/1176617.1176667},
	acmid = {1176667},
	publisher = {ACM},
	address = {New York, NY, USA},
	keywords = {FindBugs, Java, static analysis},
} 

@InProceedings{Toman-2017,
	author =	{John Toman and Dan Grossman},
	title =	{{Taming the Static Analysis Beast}},
	booktitle =	{2nd Summit on Advances in Programming Languages (SNAPL 2017)},
	pages =	{18:1--18:14},
	series =	{Leibniz International Proceedings in Informatics (LIPIcs)},
	ISBN =	{978-3-95977-032-3},
	ISSN =	{1868-8969},
	year =	{2017},
	volume =	{71},
	editor =	{Benjamin S. Lerner and Rastislav Bod{\'i}k and Shriram Krishnamurthi},
	publisher =	{Schloss Dagstuhl--Leibniz-Zentrum fuer Informatik},
	address =	{Dagstuhl, Germany},
	URL =		{http://drops.dagstuhl.de/opus/volltexte/2017/7121},
	URN =		{urn:nbn:de:0030-drops-71213},
	doi =		{10.4230/LIPIcs.SNAPL.2017.18},
	annote =	{Keywords: static analysis, frameworks, api knowledge, library specifications}
}

@inproceedings{Smith-2009,
	title={Detecting and Measuring Similarity in Code Clones},
	author={Randy Smith and Susan Horwitz},
	year={2009}
}

@INPROCEEDINGS{Li-2017, 
	author={Liuqing Li and He Feng and Wenjie Zhuang and Na Meng and Barbara Ryder}, 
	booktitle={2017 IEEE International Conference on Software Maintenance and Evolution (ICSME)}, 
	title={CCLearner: A Deep Learning-Based Clone Detection Approach}, 
	year={2017}, 
	volume={}, 
	number={}, 
	pages={249-260}, 
	keywords={learning (artificial intelligence);pattern classification;program debugging;program diagnostics;public domain software;software maintenance;software reusability;source code (software);trees (mathematics);competitive clone detection effectiveness;CCLearner;CCLEARNER;deep learning-based clone detection approach;software development;code reuse;programming productivity;software maintenance;bug fixes;program changes;code locations;clone detection tools;source code tokenization;tree-matching algorithms;abstract syntax trees;AST;token-based clone detection approach;method-level code clones;codebase;classifier training;BigCloneBench;Cloning;Feature extraction;Machine learning;Neural networks;Tools;Training;Testing;deep learning;clone detection;empirical}, 
	doi={10.1109/ICSME.2017.46}, 
	ISSN={}, 
	month={Sep.},}

@inproceedings{Wang-2016b,
	author = {Wang, Song and Liu, Taiyue and Tan, Lin},
	title = {Automatically Learning Semantic Features for Defect Prediction},
	booktitle = {Proceedings of the 38th International Conference on Software Engineering},
	series = {ICSE '16},
	year = {2016},
	isbn = {978-1-4503-3900-1},
	location = {Austin, Texas},
	pages = {297--308},
	numpages = {12},
	url = {http://doi.acm.org/10.1145/2884781.2884804},
	doi = {10.1145/2884781.2884804},
	acmid = {2884804},
	publisher = {ACM},
	address = {New York, NY, USA},
} 

@INPROCEEDINGS{Liang-2016, 
	author={Bin Liang and Pan Bian and Yan Zhang and Wenchang Shi and Wei You and Yan Cai}, 
	booktitle={2016 IEEE/ACM 38th International Conference on Software Engineering (ICSE)}, 
	title={AntMiner: Mining More Bugs by Reducing Noise Interference}, 
	year={2016}, 
	volume={}, 
	number={}, 
	pages={333-344}, 
	keywords={data mining;Linux;operating system kernels;program debugging;program slicing;AntMiner approach;noise interference reduction;bug detection;code mining;source code preprocessing;program slicing technique;semantics-equivalent representation;Linux kernel;Coverity tool;Computer bugs;Data mining;Kernel;Programming;Linux;Databases;Bug detection;Code mining;Program slicing}, 
	doi={10.1145/2884781.2884870}, 
	ISSN={1558-1225}, 
	month={May},}

@article{Kim-2018,
	author    = {Hyeji Kim and
	Yihan Jiang and
	Sreeram Kannan and
	Sewoong Oh and
	Pramod Viswanath},
	title     = {Deepcode: Feedback Codes via Deep Learning},
	journal   = {CoRR},
	volume    = {abs/1807.00801},
	year      = {2018},
	url       = {http://arxiv.org/abs/1807.00801},
	archivePrefix = {arXiv},
	eprint    = {1807.00801},
	timestamp = {Mon, 13 Aug 2018 16:48:32 +0200},
	biburl    = {https://dblp.org/rec/bib/journals/corr/abs-1807-00801},
	bibsource = {dblp computer science bibliography, https://dblp.org}
}

@inproceedings{Yang-2015,
	author = {Yang, Shuo and Luo, Ping and Loy, Chen Change and Shum, Kenneth W. and Tang, Xiaoou},
	title = {Deep Representation Learning with Target Coding},
	booktitle = {Proceedings of the Twenty-Ninth AAAI Conference on Artificial Intelligence},
	series = {AAAI'15},
	year = {2015},
	isbn = {0-262-51129-0},
	location = {Austin, Texas},
	pages = {3848--3854},
	numpages = {7},
	url = {http://dl.acm.org/citation.cfm?id=2888116.2888250},
	acmid = {2888250},
	publisher = {AAAI Press},
} 


@inproceedings{Nam-2015,
	author = {Nam, Jaechang and Kim, Sunghun},
	title = {Heterogeneous Defect Prediction},
	booktitle = {Proceedings of the 2015 10th Joint Meeting on Foundations of Software Engineering},
	series = {ESEC/FSE 2015},
	year = {2015},
	isbn = {978-1-4503-3675-8},
	location = {Bergamo, Italy},
	pages = {508--519},
	numpages = {12},
	url = {http://doi.acm.org/10.1145/2786805.2786814},
	doi = {10.1145/2786805.2786814},
	acmid = {2786814},
	publisher = {ACM},
	address = {New York, NY, USA},
	keywords = {Defect prediction, heterogeneous metrics, quality assurance},
}

@inproceedings{Hovemeyer-2007,
	author = {Hovemeyer, David and Pugh, William},
	title = {Finding More Null Pointer Bugs, but Not Too Many},
	booktitle = {Proceedings of the 7th ACM SIGPLAN-SIGSOFT Workshop on Program Analysis for Software Tools and Engineering},
	series = {PASTE '07},
	year = {2007},
	isbn = {978-1-59593-595-3},
	location = {San Diego, California, USA},
	pages = {9--14},
	numpages = {6},
	url = {http://doi.acm.org/10.1145/1251535.1251537},
	doi = {10.1145/1251535.1251537},
	acmid = {1251537},
	publisher = {ACM},
	address = {New York, NY, USA},
	keywords = {FindBugs, Java, bug patterns, bugs, null pointers, software quality, static analysis},
} 

@online{ProjectWebsite-2019,
	title = {The GitHub Repository for This Study},
	year = 2019,
	url = {https://github.com/OOPSLA-2019-BugDetection/OOPSLA-2019-BugDetection},
}

@inproceedings{word2vec,
	author    = {Tomas Mikolov and
	Ilya Sutskever and
	Kai Chen and
	Gregory S. Corrado and
	Jeffrey Dean},
	title     = {Distributed Representations of Words and Phrases and their Compositionality},
	booktitle = {27th Annual Conference on Neural Information Processing Systems 2013 (NIPS'13)},
	pages     = {3111--3119},
	year      = {2013},
}

@article{brockschmidt2018generative,
	title={Generative code modeling with graphs},
	author={Brockschmidt, Marc and Allamanis, Miltiadis and Gaunt, Alexander L and Polozov, Oleksandr},
	journal={arXiv preprint arXiv:1805.08490},
	year={2018}
}

@article{hochreiter1997long,
	title={Long short-term memory},
	author={Hochreiter, Sepp and Schmidhuber, J{\"u}rgen},
	journal={Neural computation},
	volume={9},
	number={8},
	pages={1735--1780},
	year={1997},
	publisher={MIT Press}
}

@inproceedings{wang2018densely,
	title={Densely Connected CNN with Multi-scale Feature Attention for Text Classification.},
	author={Wang, Shiyao and Huang, Minlie and Deng, Zhidong},
	booktitle={IJCAI},
	pages={4468--4474},
	year={2018}
}

@article{chung2016hierarchical,
	title={Hierarchical multiscale recurrent neural networks},
	author={Chung, Junyoung and Ahn, Sungjin and Bengio, Yoshua},
	journal={arXiv preprint arXiv:1609.01704},
	year={2016}
}

@techreport{gao2018hierarchical,
	title={Hierarchical convolutional attention networks for text classification},
	author={Gao, Shang and Ramanathan, Arvind and Tourassi, Georgia},
	year={2018},
	institution={Oak Ridge National Lab.(ORNL), Oak Ridge, TN (United States)}
}

@article{girshick2015region,
	title={Region-based convolutional networks for accurate object detection and segmentation},
	author={Girshick, Ross and Donahue, Jeff and Darrell, Trevor and Malik, Jitendra},
	journal={IEEE transactions on pattern analysis and machine intelligence},
	volume={38},
	number={1},
	pages={142--158},
	year={2015},
	publisher={IEEE}
}

@inproceedings{perozzi2014deepwalk,
	title={Deepwalk: Online learning of social representations},
	author={Perozzi, Bryan and Al-Rfou, Rami and Skiena, Steven},
	booktitle={Proceedings of the 20th ACM SIGKDD international conference on Knowledge discovery and data mining},
	pages={701--710},
	year={2014},
	organization={ACM}
}

@article{wong2009bp,
	title={{BP} neural network-based effective fault localization},
	author={Wong, W Eric and Qi, Yu},
	journal={International Journal of Software Engineering and Knowledge Engineering},
	volume={19},
	number={04},
	pages={573--597},
	year={2009},
	publisher={World Scientific}
}

@article{zhang2017deep,
	title={Deep Learning-Based Fault Localization with Contextual Information},
	author={Zhang, Zhuo and Lei, Yan and Tan, Qingping and Mao, Xiaoguang and Zeng, Ping and Chang, Xi},
	journal={Ieice Transactions on Information and Systems},
	volume={100},
	number={12},
	pages={3027--3031},
	year={2017},
	publisher={The Institute of Electronics, Information and Communication Engineers}
}

@inproceedings{briand2007using,
	title={Using machine learning to support debugging with tarantula},
	author={Briand, Lionel C and Labiche, Yvan and Liu, Xuetao},
	booktitle={The 18th IEEE International Symposium on Software Reliability (ISSRE'07)},
	pages={137--146},
	year={2007},
	organization={IEEE}
}

@article{zheng2016fault,
	title={Fault localization analysis based on deep neural network},
	author={Zheng, Wei and Hu, Desheng and Wang, Jing},
	journal={Mathematical Problems in Engineering},
	volume={2016},
	year={2016},
	doi = {https://doi.org/10.1155/2016/1820454},
	publisher={Hindawi},
}

@inproceedings{b2016learning,
	title={A learning-to-rank based fault localization approach using likely invariants},
	author={B Le, Tien-Duy and Lo, David and Le Goues, Claire and Grunske, Lars},
	booktitle={Proceedings of the 25th International Symposium on
                  Software Testing and Analysis (ISSTA'16)},
	pages={177--188},
	year={2016},
	organization={ACM}
}

@inproceedings{papadakis2012using,
	title={Using mutants to locate "unknown" faults},
	author={Papadakis, Mike and Le Traon, Yves},
	booktitle={IEEE International Conference on Software Testing, Verification and Validation},
	pages={691--700},
	year={2012},
	organization={IEEE}
}

@article{musco2017large,
	title={A large-scale study of call graph-based impact prediction using mutation testing},
	author={Musco, Vincenzo and Monperrus, Martin and Preux, Philippe},
	journal={Software Quality Journal},
	volume={25},
	number={3},
	pages={921--950},
	year={2017},
	publisher={Springer}
}

@inproceedings{zhang2010test,
	title={Test generation via dynamic symbolic execution for mutation testing},
	author={Zhang, Lingming and Xie, Tao and Zhang, Lu and Tillmann, Nikolai and De Halleux, Jonathan and Mei, Hong},
	booktitle={IEEE International Conference on Software Maintenance (ICSM'10)},
	pages={1--10},
	year={2010},
	organization={IEEE}
}

@article{budd1981mutation,
	title={MUTATION ANALYSIS OF PROGRAM TEST DATA.},
	author={Budd, Timothy Alan},
	year={1981}
}

@inproceedings{zhang2013injecting,
author = {Zhang, Lingming and Zhang, Lu and Khurshid, Sarfraz},
title = {Injecting Mechanical Faults to Localize Developer Faults for Evolving Software},
year = {2013},
isbn = {9781450323741},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2509136.2509551},
doi = {10.1145/2509136.2509551},
booktitle = {Proceedings of the 2013 ACM SIGPLAN International Conference on Object Oriented Programming Systems Languages and Applications},
pages = {765–784},
numpages = {20},
keywords = {fault localization, regression testing, mutation testing, software evolution},
location = {Indianapolis, Indiana, USA},
series = {OOPSLA '13}
}


@article{lucia2014extended,
	title={Extended comprehensive study of association measures for fault localization},
	author={Lucia, Lucia and Lo, David and Jiang, Lingxiao and Thung, Ferdian and Budi, Aditya},
	journal={Journal of software: Evolution and Process},
	volume={26},
	number={2},
	pages={172--219},
	year={2014},
	publisher={Wiley Online Library}
}


@inproceedings{liblit2005scalable,
author = {Liblit, Ben and Naik, Mayur and Zheng, Alice X. and Aiken, Alex and Jordan, Michael I.},
title = {Scalable Statistical Bug Isolation},
year = {2005},
isbn = {1595930566},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1065010.1065014},
doi = {10.1145/1065010.1065014},
booktitle = {Proceedings of the 2005 ACM SIGPLAN Conference on Programming Language Design and Implementation},
pages = {15–26},
numpages = {12},
keywords = {feature selection, invariants, random sampling, statistical debugging, bug isolation},
location = {Chicago, IL, USA},
series = {PLDI '05}
}

@INPROCEEDINGS{jones2001visualization,
  author={J. A. {Jones} and M. J. {Harrold} and J. {Stasko}},
  booktitle={Proceedings of the 24th International Conference on Software Engineering (ICSE'02)}, 
  title={Visualization of test information to assist fault localization}, 
  year={2002},
  volume={},
  number={},
  pages={467-477},
  doi={10.1145/581396.581397}}


@inproceedings{keller2017critical,
	title={A critical evaluation of spectrum-based fault localization techniques on a large-scale software system},
	author={Keller, Fabian and Grunske, Lars and Heiden, Simon and Filieri, Antonio and van Hoorn, Andre and Lo, David},
	booktitle={IEEE International Conference on Software Quality, Reliability and Security (QRS'17)},
	pages={114--125},
	year={2017},
	organization={IEEE}
}

@inproceedings{wong2007effective,
	title={Effective fault localization using code coverage},
	author={Wong, W Eric and Qi, Yu and Zhao, Lei and Cai, Kai-Yuan},
	booktitle={31st Annual International Computer Software and Applications Conference (COMPSAC 2007)},
	volume={1},
	pages={449--456},
	year={2007},
	organization={IEEE}
}

@article{naish2011model,
	title={A model for spectra-based software diagnosis},
	author={Naish, Lee and Lee, Hua Jie and Ramamohanarao, Kotagiri},
	journal={ACM Transactions on software engineering and methodology (TOSEM)},
	volume={20},
	number={3},
	pages={11},
	year={2011},
	publisher={ACM}
}


@inproceedings{jones2005empirical,
	title={Empirical evaluation of the tarantula automatic fault-localization technique},
	author={Jones, James A and Harrold, Mary Jean},
	booktitle={Proceedings of the 20th IEEE/ACM international Conference on Automated Software Engineering (ASE'05)},
	pages={273--282},
	year={2005},
	organization={ACM}
}

@inproceedings{abreu2007accuracy,
	title={On the accuracy of spectrum-based fault localization},
	author={Abreu, Rui and Zoeteweij, Peter and Van Gemund, Arjan JC},
	booktitle={Testing: Academic and Industrial Conference Practice and Research Techniques-MUTATION (TAICPART-MUTATION 2007)},
	pages={89--98},
	year={2007},
	organization={IEEE}
}

@inproceedings{zhang2011localizing,
	title={Localizing failure-inducing program edits based on spectrum information},
	author={Zhang, Lingming and Kim, Miryung and Khurshid, Sarfraz},
	booktitle={Proceedings of the 27th IEEE International Conference on Software Maintenance (ICSM'11)},
	pages={23--32},
	year={2011},
	organization={IEEE}
}

@online{boa,
	title = {Boa is a domain-specific language and infrastructure},
	year = 2019,
	url = {http://boa.cs.iastate.edu/},
}



@online{dimacs,
	title = {BDIMACS is the Center for Discrete Mathematics and Theoretical Computer Science},
	url = {http://dimacs.rutgers.edu/about/},
}



@online{njii,
	title = {The New Jersey Innovation Institute is an NJIT corporation},
	url = {https://njii.com/},
}

@inproceedings{Dyer-Nguyen-Rajan-Nguyen-13,
	author = {Dyer, Robert and Nguyen, Hoan Anh and Rajan, Hridesh and Nguyen, Tien N.},
	title = {Boa: A Language and Infrastructure for Analyzing Ultra-Large-Scale Software Repositories},
	booktitle = {Proceedings of the 35th International Conference on Software Engineering},
	year = {2013},
	series = {{ICSE}'13},
	pages = {422--431},
	location = {San Francisco, CA},
}


@inproceedings{pldi_fl,
	author = {Li, Yi and Wang, Shaohua and Nguyen, Tien N.},
	title = {Improving Fault Localization via Code and Testing Information Representation Learning},
	booktitle = {Submitted to PLDI},
	year = {2019}
}

@inproceedings{icse21-fl,
	author = {Li, Yi and Wang, Shaohua and Nguyen, Tien N.},
	title = {Fault Localization with Code Coverage Representation Learning},
	booktitle = {Proceedings of the 43rd International Conference on Software Engineering},
	year = {2021},
	series = {{ICSE}'21},
	publisher = {IEEE},
}

@book{Goodfellow-et-al-2016,
	title={Deep Learning},
	author={Ian Goodfellow and Yoshua Bengio and Aaron Courville},
	publisher={MIT Press},
	note={\url{http://www.deeplearningbook.org}},
	year={2016}
}

@inproceedings{son-2019-ase,
	title={Combining Program Analysis and Statistical Language Model for Code Statement Completion},
	author={Nguyen,Son Van and Nguyen, Tien N. and Li, Yi and Wang, Shaohua Wang},
	booktitle={Proceedings of the 34th IEEE/ACM International Conference on Automated Software Engineering Conference (ASE 2019)},
	year={2019},
	organization={IEEE}
}

@article{noei2019towards,
	title={Towards prioritizing user-related issue reports of mobile applications},
	author={Noei, Ehsan and Zhang, Feng and Wang, Shaohua and Zou, Ying},
	journal={Empirical Software Engineering},
	volume={24},
	number={4},
	pages={1964--1996},
	year={2019},
	publisher={Springer}
}

@article{wang2016improving,
	title={Improving bug management using correlations in crash reports},
	author={Wang, Shaohua and Khomh, Foutse and Zou, Ying},
	journal={Empirical Software Engineering},
	volume={21},
	number={2},
	pages={337--367},
	year={2016},
	publisher={Springer}
}

@inproceedings{wang2013improving,
	title={Improving bug localization using correlations in crash reports},
	author={Wang, Shaohua and Khomh, Foutse and Zou, Ying},
	booktitle={Proceedings of the 10th Working Conference on Mining Software Repositories},
	pages={247--256},
	year={2013},
	organization={IEEE Press}
}

@inproceedings{wang2014developers,
	title={How do developers react to restful api evolution?},
	author={Wang, Shaohua and Keivanloo, Iman and Zou, Ying},
	booktitle={International Conference on Service-Oriented Computing},
	pages={245--259},
	year={2014},
	organization={Springer}
}

@inproceedings{venkatesh2016client,
	title={What do client developers concern when using web apis? an empirical study on developer forums and stack overflow},
	author={Venkatesh, Pradeep K and Wang, Shaohua and Zhang, Feng and Zou, Ying and Hassan, Ahmed E},
	booktitle={2016 IEEE International Conference on Web Services (ICWS)},
	pages={131--138},
	year={2016},
	organization={IEEE}
}

@article{barbour2018investigation,
	title={An investigation of the fault-proneness of clone evolutionary patterns},
	author={Barbour, Liliane and An, Le and Khomh, Foutse and Zou, Ying and Wang, Shaohua},
	journal={Software Quality Journal},
	volume={26},
	number={4},
	pages={1187--1222},
	year={2018},
	publisher={Springer}
}

@inproceedings{wang2019extracting,
	title={Extracting API tips from developer question and answer websites},
	author={Wang, Shaohua and Phan, NhatHai and Wang, Yan and Zhao, Yong},
	booktitle={Proceedings of the 16th International Conference on Mining Software Repositories},
	pages={321--332},
	year={2019},
	organization={IEEE Press}
}

@article{goyal2018graph,
	title={Graph embedding techniques, applications, and performance: A survey},
	author={Goyal, Palash and Ferrara, Emilio},
	journal={Knowledge-Based Systems},
	volume={151},
	pages={78--94},
	year={2018},
	publisher={Elsevier}
}


@ARTICLE{cnn-image,
author={Y. {Wei} and W. {Xia} and M. {Lin} and J. {Huang} and B. {Ni} and J. {Dong} and Y. {Zhao} and S. {Yan}},
journal={IEEE Transactions on Pattern Analysis and Machine Intelligence},
title={HCP: A Flexible CNN Framework for Multi-Label Image Classification},
year={2016},
volume={38},
number={9},
pages={1901-1907},
doi={10.1109/TPAMI.2015.2491929},
month={Sep.},}

@article{fl-survey,
 author = {Wong, W. Eric and Gao, Ruizhi and Li, Yihao and Abreu, Rui and Wotawa, Franz},
 title = {A Survey on Software Fault Localization},
 journal = {IEEE Trans. Softw. Eng.},
 issue_date = {August 2016},
 volume = {42},
 number = {8},
 month = aug,
 year = {2016},
 issn = {0098-5589},
 pages = {707--740},
 numpages = {34},
 url = {https://doi.org/10.1109/TSE.2016.2521368},
 doi = {10.1109/TSE.2016.2521368},
 acmid = {3012182},
 publisher = {IEEE Press},
 address = {Piscataway, NJ, USA},
} 


@article{LeGoues15tse,
  author = {Claire {Le Goues} and Neal Holtschulte and Edward K. Smith and
            Yuriy Brun and Premkumar Devanbu and Stephanie Forrest and 
            Westley Weimer},
  title = {The {ManyBugs} and {IntroClass} Benchmarks for Automated Repair of
           {C} Programs},
  journal = {IEEE Transactions on Software Engineering (TSE)},
  year = {2015},
  issn = {0098-5589},
  volume = {41},
  number = {12},
  month = {December},
  pages = {1236--1256},
  doi = {10.1109/TSE.2015.2454513},
}

@Misc{hadamard,
	howpublished = {\url{https://en.wikipedia.org/wiki/Hadamard_product_(matrices)}},
	note = {Last Accessed July 11, 2019},
	title = {Hadamard product},
	author = {Hadamard}
}

@INPROCEEDINGS{CNN-FL,
  author={Z. {Zhang} and Y. {Lei} and X. {Mao} and P. {Li}},
  booktitle={IEEE 26th International Conference on Software Analysis, Evolution and Reengineering (SANER'19)}, 
  title={{CNN-FL}: An Effective Approach for Localizing Faults using Convolutional Neural Networks}, 
  year={2019},
  volume={},
  number={},
  pages={445-455},
  doi={10.1109/SANER.2019.8668002}
}

@inproceedings{tarantula05,
 author = {Jones, James A. and Harrold, Mary Jean},
 title = {Empirical evaluation of the tarantula automatic fault-localization technique},
 booktitle = {Proceedings of the 20th IEEE/ACM international Conference on Automated software engineering},
 series = {ASE '05},
 year = {2005},
 pages = {273--282},
 publisher = {ACM},
}


@inproceedings{liblit-pldi05,
author = {Liblit, Ben and Naik, Mayur and Zheng, Alice X. and Aiken, Alex and Jordan, Michael I.},
title = {Scalable Statistical Bug Isolation},
year = {2005},
isbn = {1595930566},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1065010.1065014},
doi = {10.1145/1065010.1065014},
abstract = {We present a statistical debugging algorithm that isolates bugs in programs containing
multiple undiagnosed bugs. Earlier statistical algorithms that focus solely on identifying
predictors that correlate with program failure perform poorly when there are multiple
bugs. Our new technique separates the effects of different bugs and identifies predictors
that are associated with individual bugs. These predictors reveal both the circumstances
under which bugs occur as well as the frequencies of failure modes, making it easier
to prioritize debugging efforts. Our algorithm is validated using several case studies,
including examples in which the algorithm identified previously unknown, significant
crashing bugs in widely used systems.},
booktitle = {Proceedings of the 2005 ACM SIGPLAN Conference on Programming Language Design and Implementation},
pages = {15–26},
numpages = {12},
keywords = {random sampling, invariants, bug isolation, feature selection, statistical debugging},
location = {Chicago, IL, USA},
series = {PLDI '05}
}


@inproceedings{zhang-fse09,
  title={Capturing propagation of infected program states},
  author={Zhang, Zhenyu and Chan, Wing Kwong and Tse, TH and Jiang, Bo and Wang, Xinming},
  booktitle={Proceedings of the 7th joint meeting of the European software engineering conference and the ACM SIGSOFT symposium on The foundations of software engineering},
  pages={43--52},
  year={2009}
}

@inproceedings{ICICA-10,
  title={Execution-aware fault localization based on the control flow analysis},
  author={Zhao, Lei and Wang, Lina and Xiong, Zuoting and Gao, Dongming},
  booktitle={International Conference on Information Computing and Applications},
  pages={158--165},
  year={2010},
  organization={Springer}
}

@inproceedings{glove2014,
  author = {Jeffrey Pennington and Richard Socher and Christopher D. Manning},
  booktitle = {Empirical Methods in Natural Language Processing (EMNLP)},
  title = {GloVe: Global Vectors for Word Representation},
  year = {2014},
  pages = {1532--1543},
  url = {http://www.aclweb.org/anthology/D14-1162},
}


@inproceedings{crashlocator-issta14,
  title={Crashlocator: Locating crashing faults based on crash stacks},
  author={Wu, Rongxin and Zhang, Hongyu and Cheung, Shing-Chi and Kim, Sunghun},
  booktitle={Proceedings of the 2014 International Symposium on Software Testing and Analysis},
  pages={204--214},
  year={2014}
}


@inproceedings{sohn2017fluccs,
	title={Fluccs: Using code and change metrics to improve fault localization},
	author={Sohn, Jeongju and Yoo, Shin},
	booktitle={Proceedings of the 26th ACM SIGSOFT International Symposium on Software Testing and Analysis},
	pages={273--283},
	year={2017}
}


@inproceedings{kuccuk2021improving,
	title={Improving fault localization by integrating value and predicate based causal inference techniques},
	author={K{\"u}{\c{c}}{\"u}k, Yi{\u{g}}it and Henderson, Tim AD and Podgurski, Andy},
	booktitle={2021 IEEE/ACM 43rd International Conference on Software Engineering (ICSE)},
	pages={649--660},
	year={2021},
	organization={IEEE}
}

@inproceedings{abreu2006evaluation,
	title={An evaluation of similarity coefficients for software fault localization},
	author={Abreu, Rui and Zoeteweij, Peter and Van Gemund, Arjan JC},
	booktitle={2006 12th Pacific Rim International Symposium on Dependable Computing (PRDC'06)},
	pages={39--46},
	year={2006},
	organization={IEEE}
}


@article{papadakis2015metallaxis,
	title={Metallaxis-FL: mutation-based fault localization},
	author={Papadakis, Mike and Le Traon, Yves},
	journal={Software Testing, Verification and Reliability},
	volume={25},
	number={5-7},
	pages={605--628},
	year={2015},
	publisher={Wiley Online Library}
}


@inproceedings{lou2021boosting,
	title={Boosting coverage-based fault localization via graph-based representation learning},
	author={Lou, Yiling and Zhu, Qihao and Dong, Jinhao and Li, Xia and Sun, Zeyu and Hao, Dan and Zhang, Lu and Zhang, Lingming},
	booktitle={Proceedings of the 29th ACM Joint Meeting on European Software Engineering Conference and Symposium on the Foundations of Software Engineering},
	pages={664--676},
	year={2021}
}

@article{jayasundara2019treecaps,
	title={TreeCaps: Tree-Structured Capsule Networks for Program Source Code Processing},
	author={Jayasundara, Vinoj and Bui, Nghi Duy Quoc and Jiang, Lingxiao and Lo, David},
	journal={arXiv preprint arXiv:1910.12306},
	year={2019}
}


@article{cho2014learning,
	title={Learning phrase representations using RNN encoder-decoder for statistical machine translation},
	author={Cho, Kyunghyun and Van Merri{\"e}nboer, Bart and Gulcehre, Caglar and Bahdanau, Dzmitry and Bougares, Fethi and Schwenk, Holger and Bengio, Yoshua},
	journal={arXiv preprint arXiv:1406.1078},
	year={2014}
}

@article{GRU-cho14,
  author    = {Kyunghyun Cho and
               Bart van Merrienboer and
               {\c{C}}aglar G{\"{u}}l{\c{c}}ehre and
               Fethi Bougares and
               Holger Schwenk and
               Yoshua Bengio},
  title     = {Learning Phrase Representations using {RNN} Encoder-Decoder for Statistical
               Machine Translation},
  journal   = {CoRR},
  volume    = {abs/1406.1078},
  year      = {2014},
  url       = {http://arxiv.org/abs/1406.1078},
  archivePrefix = {arXiv},
  eprint    = {1406.1078},
  timestamp = {Mon, 13 Aug 2018 16:46:44 +0200},
  biburl    = {https://dblp.org/rec/journals/corr/ChoMGBSB14.bib},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}

@inproceedings{bui2021treecaps,
	title={TreeCaps: Tree-Based Capsule Networks for Source Code Processing},
	author={Bui, Nghi DQ and Yu, Yijun and Jiang, Lingxiao},
	booktitle={Proceedings of the AAAI Conference on Artificial Intelligence},
	volume={35},
	number={1},
	pages={30--38},
	year={2021}
}

@Misc{bilinear-interpolation,
	howpublished = {\url{https://en.wikipedia.org/wiki/Bilinear_interpolation}},
	note = {Last Accessed August 30, 2021},
	title = {Bilinear Interpolation},
	author = {Unknown}
}

@Misc{FixLocator2022,
  title = {FixLocator},
  year = 2021,
  url = {https://github.com/fixlocatorresearch/fixlocatorresearch},
}


@inproceedings{icse22,
	author = {Li, Yi and Wang, Shaohua and Nguyen, Tien N.},
	title = {A Novel Deep Learning-based Approach for Automated Program
Repair},
	booktitle = {Proceedings of the 44th International Conference on Software Engineering},
	year = {2022},
	series = {{ICSE}'22},
	publisher = {ACM Press},
}

@inproceedings{hercules-icse19,
author = {Saha, Seemanta and Saha, Ripon K. and Prasad, Mukul R.},
title = {Harnessing Evolution for Multi-Hunk Program Repair},
year = {2019},
publisher = {IEEE Press},
doi = {10.1109/ICSE.2019.00020},
url = {https://doi.org/10.1145/3360588}
booktitle = {Proceedings of the 41st International Conference on Software Engineering},
pages = {13–24},
numpages = {12},
series = {ICSE ’19}
}

@inproceedings{tdcleaner-fse21,
author = {Gao, Zhipeng and Xia, Xin and Lo, David and Grundy, John and Zimmermann, Thomas},
title = {Automating the Removal of Obsolete TODO Comments},
year = {2021},
isbn = {9781450385626},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3468264.3468553},
doi = {10.1145/3468264.3468553},
booktitle = {Proceedings of the 29th ACM Joint Meeting on European Software Engineering Conference and Symposium on the Foundations of Software Engineering},
pages = {218–229},
numpages = {12},
keywords = {Code-Comment Inconsistency, TODO comment, Bert},
location = {Athens, Greece},
series = {ESEC/FSE 2021}
}

@inproceedings{wen-icpc19,
author = {Wen, Fengcai and Nagy, Csaba and Bavota, Gabriele and Lanza, Michele},
title = {A Large-Scale Empirical Study on Code-Comment Inconsistencies},
year = {2019},
publisher = {IEEE Press},
url = {https://doi.org/10.1109/ICPC.2019.00019},
doi = {10.1109/ICPC.2019.00019},
booktitle = {Proceedings of the 27th International Conference on Program Comprehension},
pages = {53–64},
numpages = {12},
keywords = {code comments, software evolution},
location = {Montreal, Quebec, Canada},
series = {ICPC '19}
}


@inproceedings{icomment-sosp07,
author = {Tan, Lin and Yuan, Ding and Krishna, Gopal and Zhou, Yuanyuan},
title = {/*icomment: Bugs or Bad Comments?*/},
year = {2007},
isbn = {9781595935915},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1294261.1294276},
doi = {10.1145/1294261.1294276},
booktitle = {Proceedings of Twenty-First ACM SIGOPS Symposium on Operating Systems Principles},
pages = {145–158},
numpages = {14},
keywords = {comment analysis, natural language processing for software engineering, programming rules and static analysis},
location = {Stevenson, Washington, USA},
series = {SOSP '07}
}

@inproceedings{souza-sigdoc05,
author = {de Souza, Sergio Cozzetti B. and Anquetil, Nicolas and de Oliveira, K\'{a}thia M.},
title = {A Study of the Documentation Essential to Software Maintenance},
year = {2005},
isbn = {1595931759},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1085313.1085331},
doi = {10.1145/1085313.1085331},
booktitle = {Proceedings of the 23rd Annual International Conference on Design of Communication: Documenting and Designing for Pervasive Information},
pages = {68–75},
numpages = {8},
keywords = {program understanding, software maintenance, software system documentation, empirical study},
location = {Coventry, United Kingdom},
series = {SIGDOC '05}
}

@inproceedings{ying-msr05,
author = {Ying, Annie T. T. and Wright, James L. and Abrams, Steven},
title = {Source Code That Talks: An Exploration of Eclipse Task Comments and Their Implication to Repository Mining},
year = {2005},
isbn = {1595931236},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1083142.1083152},
doi = {10.1145/1083142.1083152},
booktitle = {Proceedings of the 2005 International Workshop on Mining Software Repositories},
pages = {1–5},
numpages = {5},
location = {St. Louis, Missouri},
series = {MSR '05}
}

@article{walid-jss12,
author = {Ibrahim, Walid M. and Bettenburg, Nicolas and Adams, Bram and Hassan, Ahmed E.},
title = {On the Relationship between Comment Update Practices and Software Bugs},
year = {2012},
issue_date = {October, 2012},
publisher = {Elsevier Science Inc.},
address = {USA},
volume = {85},
number = {10},
issn = {0164-1212},
url = {https://doi.org/10.1016/j.jss.2011.09.019},
doi = {10.1016/j.jss.2011.09.019},
journal = {J. Syst. Softw.},
month = {oct},
pages = {2293–2304},
numpages = {12},
}

@inproceedings{lintan-icse11,
author = {Tan, Lin and Zhou, Yuanyuan and Padioleau, Yoann},
title = {AComment: Mining Annotations from Comments and Code to Detect Interrupt Related Concurrency Bugs},
year = {2011},
isbn = {9781450304450},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1985793.1985796},
doi = {10.1145/1985793.1985796},
booktitle = {Proceedings of the 33rd International Conference on Software Engineering},
pages = {11–20},
numpages = {10},
keywords = {concurrency bug detection, interrupts, annotation languages, static analysis, operating systems},
location = {Waikiki, Honolulu, HI, USA},
series = {ICSE '11}
}


@inproceedings{flexeme-fse20,
author = {P\^{a}rundefinedachi, Profir-Petru and Dash, Santanu Kumar and Allamanis, Miltiadis and Barr, Earl T.},
title = {Flexeme: Untangling Commits Using Lexical Flows},
year = {2020},
isbn = {9781450370431},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3368089.3409693},
doi = {10.1145/3368089.3409693},
booktitle = {Proceedings of the 28th ACM Joint Meeting on European Software Engineering Conference and Symposium on the Foundations of Software Engineering},
pages = {63–74},
numpages = {12},
keywords = {clustering, graph kernels, commint untangling},
location = {Virtual Event, USA},
series = {ESEC/FSE 2020}
}

@INPROCEEDINGS{deepCVA-ase21,
  author={Minh Le, Triet Huynh and Hin, David and Croft, Roland and Ali Babar, M.},
  booktitle={2021 36th IEEE/ACM International Conference on Automated Software Engineering (ASE)}, 
  title={DeepCVA: Automated Commit-level Vulnerability Assessment with Deep Multi-task Learning}, 
  year={2021},
  volume={},
  number={},
  pages={717-729},
  doi={10.1109/ASE51524.2021.9678622}}

@Misc{first-website,
  title = {Common Vulnerability Scoring System},
  year = 2021,
  url = {https://www.first.org/cvss/},
}

@INPROCEEDINGS{feutrill-candar18,
  author={Feutrill, Andrew and Ranathunga, Dinesha and Yarom, Yuval and Roughan, Matthew},
  booktitle={2018 Sixth International Symposium on Computing and Networking (CANDAR)}, 
  title={The Effect of Common Vulnerability Scoring System Metrics on Vulnerability Exploit Delay}, 
  year={2018},
  volume={},
  number={},
  pages={1-10},
  doi={10.1109/CANDAR.2018.00009}}

@INPROCEEDINGS{meneely-esem13,
  author={Meneely, Andrew and Srinivasan, Harshavardhan and Musa, Ayemi and Tejeda, Alberto Rodríguez and Mokary, Matthew and Spates, Brian},
  booktitle={2013 ACM / IEEE International Symposium on Empirical Software Engineering and Measurement}, 
  title={When a Patch Goes Bad: Exploring the Properties of Vulnerability-Contributing Commits}, 
  year={2013},
  volume={},
  number={},
  pages={65-74},
  doi={10.1109/ESEM.2013.19}}

@INPROCEEDINGS{thung-icsme12,
  author={Thung, Ferdian and Lo, David and Jiang, Lingxiao and Lucia and Rahman, Foyzur and Devanbu, Premkumar T.},
  booktitle={2012 28th IEEE International Conference on Software Maintenance (ICSM)}, 
  title={When would this bug get reported?}, 
  year={2012},
  volume={},
  number={},
  pages={420-429},
  doi={10.1109/ICSM.2012.6405302}}

@INPROCEEDINGS{lamkanfi-msr10,
  author={Lamkanfi, Ahmed and Demeyer, Serge and Giger, Emanuel and Goethals, Bart},
  booktitle={2010 7th IEEE Working Conference on Mining Software Repositories (MSR 2010)}, 
  title={Predicting the severity of a reported bug}, 
  year={2010},
  volume={},
  number={},
  pages={1-10},
  doi={10.1109/MSR.2010.5463284}}

@INPROCEEDINGS{han-icsme17,
  author={Han, Zhuobing and Li, Xiaohong and Xing, Zhenchang and Liu, Hongtao and Feng, Zhiyong},
  booktitle={2017 IEEE International Conference on Software Maintenance and Evolution (ICSME)}, 
  title={Learning to Predict Severity of Software Vulnerability Using Only Vulnerability Description}, 
  year={2017},
  volume={},
  number={},
  pages={125-136},
  doi={10.1109/ICSME.2017.52}}

@article{spanos2018multi,
title = {A multi-target approach to estimate software vulnerability characteristics and severity scores},
journal = {Journal of Systems and Software},
volume = {146},
pages = {152-166},
year = {2018},
issn = {0164-1212},
doi = {https://doi.org/10.1016/j.jss.2018.09.039},
url = {https://www.sciencedirect.com/science/article/pii/S0164121218302061},
author = {Georgios Spanos and Lefteris Angelis},
keywords = {Information security, Software vulnerability, Text analysis, Multi-target classification},
abstract = {Software vulnerabilities constitute a great risk for the IT community. The specification of the vulnerability characteristics is a crucial procedure, since the characteristics are used as input for a plethora of vulnerability scoring systems. Currently, the determination of the specific characteristics -that represent each vulnerability- is a process that is performed manually by the IT security experts. However, the vulnerability description can be very informative and useful to predict vulnerability characteristics. The primary goal of this research is the enhancement, the acceleration and the support of the manual procedure of the vulnerability characteristic assignment. To achieve this goal, a model, which combines texts analysis and multi-target classification techniques was developed. This model estimates the vulnerability characteristics and subsequently, calculates the vulnerability severity scores from the predicted characteristics. To perform the present research, a dataset that contains 99,091 records from a large -publicly available- vulnerability database was used. The results are encouraging, since they show accuracy in the prediction of the vulnerability characteristics and scores.}
}


@inproceedings{le2019automated,
author = {Le, Triet Huynh Minh and Sabir, Bushra and Babar, M. Ali},
title = {Automated Software Vulnerability Assessment with Concept Drift},
year = {2019},
publisher = {IEEE Press},
url = {https://doi.org/10.1109/MSR.2019.00063},
doi = {10.1109/MSR.2019.00063},
abstract = {Software Engineering researchers are increasingly using Natural Language Processing (NLP) techniques to automate Software Vulnerabilities (SVs) assessment using the descriptions in public repositories. However, the existing NLP-based approaches suffer from concept drift. This problem is caused by a lack of proper treatment of new (out-of-vocabulary) terms for the evaluation of unseen SVs over time. To perform automated SVs assessment with concept drift using SVs' descriptions, we propose a systematic approach that combines both character and word features. The proposed approach is used to predict seven Vulnerability Characteristics (VCs). The optimal model of each VC is selected using our customized time-based cross-validation method from a list of eight NLP representations and six well-known Machine Learning models. We have used the proposed approach to conduct large-scale experiments on more than 100,000 SVs in the National Vulnerability Database (NVD). The results show that our approach can effectively tackle the concept drift issue of the SVs' descriptions reported from 2000 to 2018 in NVD even without retraining the model. In addition, our approach performs competitively compared to the existing word-only method. We also investigate how to build compact concept-drift-aware models with much fewer features and give some recommendations on the choice of classifiers and NLP representations for SVs assessment.},
booktitle = {Proceedings of the 16th International Conference on Mining Software Repositories},
pages = {371–382},
numpages = {12},
keywords = {multi-class classification, natural language processing, machine learning, mining software repositories, software vulnerability},
location = {Montreal, Quebec, Canada},
series = {MSR '19}
}


@article{pdg,
author = {Ferrante, Jeanne and Ottenstein, Karl J. and Warren, Joe D.},
title = {The Program Dependence Graph and Its Use in Optimization},
year = {1987},
issue_date = {July 1987},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {9},
number = {3},
issn = {0164-0925},
url = {https://doi.org/10.1145/24039.24041},
doi = {10.1145/24039.24041},
journal = {ACM Trans. Program. Lang. Syst.},
month = {jul},
pages = {319–349},
numpages = {31}
}



@article{label-gcn,
  author    = {Claudio Bellei and
               Hussain Alattas and
               Nesrine Kaaniche},
  title     = {Label-GCN: An Effective Method for Adding Label Propagation to Graph
               Convolutional Networks},
  journal   = {CoRR},
  volume    = {abs/2104.02153},
  year      = {2021},
  url       = {https://arxiv.org/abs/2104.02153},
  eprinttype = {arXiv},
  eprint    = {2104.02153},
  timestamp = {Mon, 12 Apr 2021 16:14:56 +0200},
  biburl    = {https://dblp.org/rec/journals/corr/abs-2104-02153.bib},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}

@inproceedings{gcn,
  author    = {Thomas N. Kipf and
               Max Welling},
  title     = {Semi-Supervised Classification with Graph Convolutional Networks},
  booktitle = {5th International Conference on Learning Representations, {ICLR} 2017,
               Toulon, France, April 24-26, 2017, Conference Track Proceedings},
  publisher = {OpenReview.net},
  year      = {2017},
  url       = {https://openreview.net/forum?id=SJU4ayYgl},
}

@misc{clustering,
      title={Modern hierarchical, agglomerative clustering algorithms}, 
      author={Daniel Müllner},
      year={2011},
      eprint={1109.2378},
      archivePrefix={arXiv},
      primaryClass={stat.ML}
}

@article{falessi2020need,
author = {Falessi, Davide and Huang, Jacky and Narayana, Likhita and Thai, Jennifer Fong and Turhan, Burak},
title = {On the Need of Preserving Order of Data When Validating Within-Project Defect Classifiers},
year = {2020},
issue_date = {Nov 2020},
publisher = {Kluwer Academic Publishers},
address = {USA},
volume = {25},
number = {6},
issn = {1382-3256},
url = {https://doi.org/10.1007/s10664-020-09868-x},
doi = {10.1007/s10664-020-09868-x},
abstract = {We are in the shoes of a practitioner who uses previous project releases’ data to predict which classes of the current release are defect-prone. In this scenario, the practitioner would like to use the most accurate classifier among the many available ones. A validation technique, hereinafter “technique”, defines how to measure the prediction accuracy of a classifier. Several previous research efforts analyzed several techniques. However, no previous study compared validation techniques in the within-project across-release class-level context or considered techniques that preserve the order of data. In this paper, we investigate which technique recommends the most accurate classifier. We use the last release of a project as the ground truth to evaluate the classifier’s accuracy and hence the ability of a technique to recommend an accurate classifier. We consider nine classifiers, two industry and 13 open projects, and three validation techniques: namely 10-fold cross-validation (i.e., the most used technique), bootstrap (i.e., the recommended technique), and walk-forward (i.e., a technique preserving the order of data). Our results show that: 1) classifiers differ in accuracy in all datasets regardless of their entity per value, 2) walk-forward outperforms both 10-fold cross-validation and bootstrap statistically in all three accuracy metrics: AUC of the selected classifier, bias and absolute bias, 3) surprisingly, all techniques resulted to be more prone to overestimate than to underestimate the performances of classifiers, and 3) the defect rate resulted in changing between the second and first half in both industry projects and 83\% of open-source datasets. This study recommends the use of techniques that preserve the order of data such as walk-forward over 10-fold cross-validation and bootstrap in the within-project across-release class-level context given the above empirical results and that walk-forward is by nature more simple, inexpensive, and stable than the other two techniques.},
journal = {Empirical Softw. Engg.},
month = {nov},
pages = {4805–4830},
numpages = {26},
keywords = {Model validation techniques, Defect classifiers, Classifiers}
}

@inproceedings{bigvul-msr20,
author = {Fan, Jiahao and Li, Yi and Wang, Shaohua and Nguyen, Tien N.},
title = {A C/C++ Code Vulnerability Dataset with Code Changes and CVE Summaries},
booktitle = {Proceedings of the 17th International Conference on Mining Software Repositories},
year = {2020},
isbn = {9781450375177},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3379597.3387501},
pages = {508–512},
numpages = {5}
}



@inproceedings{li2021vulnerability,
author = {Li, Yi and Wang, Shaohua and Nguyen, Tien N.},
title = {Vulnerability Detection with Fine-Grained Interpretations},
year = {2021},
isbn = {9781450385626},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3468264.3468597},
booktitle = {Proceedings of the 29th ACM Joint Meeting on European Software Engineering Conference and Symposium on the Foundations of Software Engineering},
pages = {292–303},
numpages = {12}
}

@article{gorodkin04,
author = {Gorodkin, J.},
title = {Comparing Two K-Category Assignments by a K-Category Correlation Coefficient},
year = {2004},
issue_date = {December, 2004},
publisher = {Elsevier Science Publishers B. V.},
address = {NLD},
volume = {28},
number = {5–6},
issn = {1476-9271},
url = {https://doi.org/10.1016/j.compbiolchem.2004.09.006},
doi = {10.1016/j.compbiolchem.2004.09.006},
journal = {Comput. Biol. Chem.},
month = {dec},
pages = {367–374},
numpages = {8},
keywords = {Matthews correlation coefficient, Protein secondary structure, RNA secondary structure}
}


@inbook{GNNExplainer,
author = {Ying, Rex and Bourgeois, Dylan and You, Jiaxuan and Zitnik, Marinka and Leskovec, Jure},
title = {GNNExplainer: Generating Explanations for Graph Neural Networks},
year = {2019},
publisher = {Curran Associates Inc.},
address = {Red Hook, NY, USA},
abstract = {Graph Neural Networks (GNNs) are a powerful tool for machine learning on graphs. GNNs combine node feature information with the graph structure by recursively passing neural messages along edges of the input graph. However, incorporating both graph structure and feature information leads to complex models and explaining predictions made by GNNs remains unsolved. Here we propose GNNEXPLAINER, the first general, model-agnostic approach for providing interpretable explanations for predictions of any GNN-based model on any graph-based machine learning task. Given an instance, GNNEXPLAINER identifies a compact subgraph structure and a small subset of node features that have a crucial role in GNN's prediction. Further, GNNEXPLAINER can generate consistent and concise explanations for an entire class of instances. We formulate GNNEXPLAINER as an optimization task that maximizes the mutual information between a GNN's prediction and distribution of possible subgraph structures. Experiments on synthetic and real-world graphs show that our approach can identify important graph structures as well as node features, and outperforms alternative baseline approaches by up to 43.0\% in explanation accuracy. GNNEXPLAINER provides a variety of benefits, from the ability to visualize semantically relevant structures to interpretability, to giving insights into errors of faulty GNNs.},
booktitle = {Proceedings of the 33rd International Conference on Neural Information Processing Systems},
articleno = {829},
numpages = {12}
}


@Misc{tsne,
	howpublished = {https://scikit-learn.org/stable/modules/generated/ sklearn.manifold.TSNE.html},
	note = {Last Accessed March 9, 2022},
	title = {T-SNE},
	author = {}
}

@INPROCEEDINGS {kendall2018multi,
author = {R. Cipolla and Y. Gal and A. Kendall},
booktitle = {2018 IEEE/CVF Conference on Computer Vision and Pattern Recognition (CVPR)},
title = {Multi-task Learning Using Uncertainty to Weigh Losses for Scene Geometry and Semantics},
year = {2018},
volume = {},
issn = {},
pages = {7482-7491},
abstract = {Numerous deep learning applications benefit from multitask learning with multiple regression and classification objectives. In this paper we make the observation that the performance of such systems is strongly dependent on the relative weighting between each task&#x27;s loss. Tuning these weights by hand is a difficult and expensive process, making multi-task learning prohibitive in practice. We propose a principled approach to multi-task deep learning which weighs multiple loss functions by considering the homoscedastic uncertainty of each task. This allows us to simultaneously learn various quantities with different units or scales in both classification and regression settings. We demonstrate our model learning per-pixel depth regression, semantic and instance segmentation from a monocular input image. Perhaps surprisingly, we show our model can learn multi-task weightings and outperform separate models trained individually on each task.},
keywords = {task analysis;uncertainty;semantics;geometry;image segmentation;computational modeling},
doi = {10.1109/CVPR.2018.00781},
url = {https://doi.ieeecomputersociety.org/10.1109/CVPR.2018.00781},
publisher = {IEEE Computer Society},
address = {Los Alamitos, CA, USA},
month = {jun}
}

@Misc{silhouette-plot,
	howpublished = {https://en.wikipedia.org/wiki/Silhouette\_(clustering)},
	note = {Last Accessed March 15, 2022},
	title = {Silhouette (clustering)},
	author = {}
}



@inproceedings{nayak2014some,
	title={Some vulnerabilities are different than others},
	author={Nayak, Kartik and Marino, Daniel and Efstathopoulos, Petros and Dumitra{\c{s}}, Tudor},
	booktitle={International Workshop on Recent Advances in Intrusion Detection},
	pages={426--446},
	year={2014},
	organization={Springer}
}



@incollection{khan2018review,
	title={Review into state-of-the-art of vulnerability assessment using artificial intelligence},
	author={Khan, Saad and Parkinson, Simon},
	booktitle={Guide to Vulnerability Analysis for Computer Networks and Systems},
	pages={3--32},
	year={2018},
	publisher={Springer}
}


@article{smyth2017software,
	title={Software vulnerability management: how intelligence helps reduce the risk},
	author={Smyth, Vincent},
	journal={Network Security},
	volume={2017},
	number={3},
	pages={10--12},
	year={2017},
	publisher={Elsevier}
}


@inproceedings{bozorgi2010beyond,
author = {Bozorgi, Mehran and Saul, Lawrence K. and Savage, Stefan and Voelker, Geoffrey M.},
title = {Beyond Heuristics: Learning to Classify Vulnerabilities and Predict Exploits},
year = {2010},
isbn = {9781450300551},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1835804.1835821},
doi = {10.1145/1835804.1835821},
abstract = {The security demands on modern system administration are enormous and getting worse. Chief among these demands, administrators must monitor the continual ongoing disclosure of software vulnerabilities that have the potential to compromise their systems in some way. Such vulnerabilities include buffer overflow errors, improperly validated inputs, and other unanticipated attack modalities. In 2008, over 7,400 new vulnerabilities were disclosed--well over 100 per week. While no enterprise is affected by all of these disclosures, administrators commonly face many outstanding vulnerabilities across the software systems they manage. Vulnerabilities can be addressed by patches, reconfigurations, and other workarounds; however, these actions may incur down-time or unforeseen side-effects. Thus, a key question for systems administrators is which vulnerabilities to prioritize. From publicly available databases that document past vulnerabilities, we show how to train classifiers that predict whether and how soon a vulnerability is likely to be exploited. As input, our classifiers operate on high dimensional feature vectors that we extract from the text fields, time stamps, cross references, and other entries in existing vulnerability disclosure reports. Compared to current industry-standard heuristics based on expert knowledge and static formulas, our classifiers predict much more accurately whether and how soon individual vulnerabilities are likely to be exploited.},
booktitle = {Proceedings of the 16th ACM SIGKDD International Conference on Knowledge Discovery and Data Mining},
pages = {105–114},
numpages = {10},
keywords = {exploits, supervised learning, SVM, vulnerabilities},
location = {Washington, DC, USA},
series = {KDD '10}
}


@article{allodi2014comparing,
author = {Allodi, Luca and Massacci, Fabio},
title = {Comparing Vulnerability Severity and Exploits Using Case-Control Studies},
year = {2014},
issue_date = {August 2014},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {17},
number = {1},
issn = {1094-9224},
url = {https://doi.org/10.1145/2630069},
doi = {10.1145/2630069},
abstract = {(U.S.) Rule-based policies for mitigating software risk suggest using the CVSS score to measure the risk of an individual vulnerability and act accordingly. A key issue is whether the ‘danger’ score does actually match the risk of exploitation in the wild, and if and how such a score could be improved. To address this question, we propose using a case-control study methodology similar to the procedure used to link lung cancer and smoking in the 1950s. A case-control study allows the researcher to draw conclusions on the relation between some risk factor (e.g., smoking) and an effect (e.g., cancer) by looking backward at the cases (e.g., patients) and comparing them with controls (e.g., randomly selected patients with similar characteristics). The methodology allows us to quantify the risk reduction achievable by acting on the risk factor. We illustrate the methodology by using publicly available data on vulnerabilities, exploits, and exploits in the wild to (1) evaluate the performances of the current risk factor in the industry, the CVSS base score; (2) determine whether it can be improved by considering additional factors such the existence of a proof-of-concept exploit, or of an exploit in the black markets. Our analysis reveals that (a) fixing a vulnerability just because it was assigned a high CVSS score is equivalent to randomly picking vulnerabilities to fix; (b) the existence of proof-of-concept exploits is a significantly better risk factor; (c) fixing in response to exploit presence in black markets yields the largest risk reduction.},
journal = {ACM Trans. Inf. Syst. Secur.},
month = {aug},
articleno = {1},
numpages = {20},
keywords = {compliance, CVSS, exploitation, patching, Software vulnerability}
}

@INPROCEEDINGS{lamkanfi2010predicting,
  author={Lamkanfi, Ahmed and Demeyer, Serge and Giger, Emanuel and Goethals, Bart},
  booktitle={2010 7th IEEE Working Conference on Mining Software Repositories (MSR 2010)}, 
  title={Predicting the severity of a reported bug}, 
  year={2010},
  volume={},
  number={},
  pages={1-10},
  doi={10.1109/MSR.2010.5463284}}


@INPROCEEDINGS{han2017learning,
  author={Han, Zhuobing and Li, Xiaohong and Xing, Zhenchang and Liu, Hongtao and Feng, Zhiyong},
  booktitle={2017 IEEE International Conference on Software Maintenance and Evolution (ICSME)}, 
  title={Learning to Predict Severity of Software Vulnerability Using Only Vulnerability Description}, 
  year={2017},
  volume={},
  number={},
  pages={125-136},
  doi={10.1109/ICSME.2017.52}}


@INPROCEEDINGS {ponta2018beyond,
author = {S. Ponta and H. Plate and A. Sabetta},
booktitle = {2018 IEEE International Conference on Software Maintenance and Evolution (ICSME)},
title = {Beyond Metadata: Code-Centric and Usage-Based Analysis of Known Vulnerabilities in Open-Source Software},
year = {2018},
volume = {},
issn = {},
pages = {449-460},
abstract = {The use of open-source software (OSS) is ever-increasing, and so is the number of open-source vulnerabilities being discovered and publicly disclosed. The gains obtained from the reuse of community-developed libraries may be offset by the cost of detecting, assessing, and mitigating their vulnerabilities in a timely manner. In this paper we present a novel method to detect, assess and mitigate OSS vulnerabilities that improves on state-of-the-art approaches, which commonly depend on metadata to identify vulnerable OSS dependencies. Our solution instead is code-centric and combines static and dynamic analysis to determine the reachability of the vulnerable portion of libraries used (directly or transitively) by an application. Taking this usage into account, our approach then supports developers in choosing among the existing non-vulnerable library versions. Vulas, the tool implementing our code-centric and usage-based approach, is officially recommended by SAP to scan its Java software, and has been successfully used to perform more than 250000 scans of about 500 applications since December 2016. We report on our experience and on the lessons we learned when maturing the tool from a research prototype to an industrial-grade solution.},
keywords = {libraries;tools;static analysis;silicon;metadata;open source software},
doi = {10.1109/ICSME.2018.00054},
url = {https://doi.ieeecomputersociety.org/10.1109/ICSME.2018.00054},
publisher = {IEEE Computer Society},
address = {Los Alamitos, CA, USA},
month = {sep}
}


@article{ponta2020detection,
author = {Ponta, Serena Elisa and Plate, Henrik and Sabetta, Antonino},
title = {Detection, Assessment and Mitigation of Vulnerabilities in Open Source Dependencies},
year = {2020},
issue_date = {Sep 2020},
publisher = {Kluwer Academic Publishers},
address = {USA},
volume = {25},
number = {5},
issn = {1382-3256},
url = {https://doi.org/10.1007/s10664-020-09830-x},
doi = {10.1007/s10664-020-09830-x},
abstract = {Open source software (OSS) libraries are widely used in the industry to speed up the development of software products. However, these libraries are subject to an ever-increasing number of vulnerabilities that are publicly disclosed. It is thus crucial for application developers to detect dependencies on vulnerable libraries in a timely manner, to precisely assess their impact, and to mitigate any potential risk. This paper presents a novel method to detect, assess and mitigate OSS vulnerabilities. Differently from state-of-the-art approaches that depend on metadata to identify vulnerable OSS dependencies, our solution is code-centric, and combines static and dynamic analyses to determine the reachability of the vulnerable portion of libraries, in the context of a given application. Our approach also supports developers in choosing among the existing non-vulnerable library versions, with the goal to determine and minimize incompatibilities. Eclipse Steady, the open source implementation of our code-centric and usage-based approach is the tool recommended to scan Java software products at SAP; it has been successfully used to perform more than one million scans of about 1500 applications. In this paper we report on the lessons learned when maturing the tool from a research prototype to an industrial-grade solution. To evaluate Eclipse Steady, we conducted an empirical study to compare its detection capabilities with those of OWASP Dependency Check (OWASP DC), scanning 300 large enterprise applications under development with a total of 78165 dependencies. Reviewing a sample of the findings reported only by one of the two tools revealed that all Steady findings are true positives, while 88.8\% of the findings of OWASP DC for vulnerabilities covered by our code-centric approach are false positives. For vulnerabilities not caused by code but due, e.g., to erroneous configuration, 63.3\% of OWASP DC findings are true positives.},
journal = {Empirical Softw. Engg.},
month = {sep},
pages = {3175–3215},
numpages = {41},
keywords = {Open source software, Combination of static and dynamic analysis, Code-centric vulnerability analysis, Usage-based update support, Publicly known vulnerabilities}
}

@inproceedings{perl2015vccfinder,
author = {Perl, Henning and Dechand, Sergej and Smith, Matthew and Arp, Daniel and Yamaguchi, Fabian and Rieck, Konrad and Fahl, Sascha and Acar, Yasemin},
title = {VCCFinder: Finding Potential Vulnerabilities in Open-Source Projects to Assist Code Audits},
year = {2015},
isbn = {9781450338325},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2810103.2813604},
doi = {10.1145/2810103.2813604},
abstract = {Despite the security community's best effort, the number of serious vulnerabilities discovered in software is increasing rapidly. In theory, security audits should find and remove the vulnerabilities before the code ever gets deployed. However, due to the enormous amount of code being produced, as well as a the lack of manpower and expertise, not all code is sufficiently audited. Thus, many vulnerabilities slip into production systems. A best-practice approach is to use a code metric analysis tool, such as Flawfinder, to flag potentially dangerous code so that it can receive special attention. However, because these tools have a very high false-positive rate, the manual effort needed to find vulnerabilities remains overwhelming. In this paper, we present a new method of finding potentially dangerous code in code repositories with a significantly lower false-positive rate than comparable systems. We combine code-metric analysis with metadata gathered from code repositories to help code review teams prioritize their work. The paper makes three contributions. First, we conducted the first large-scale mapping of CVEs to GitHub commits in order to create a vulnerable commit database. Second, based on this database, we trained a SVM classifier to flag suspicious commits. Compared to Flawfinder, our approach reduces the amount of false alarms by over 99 \% at the same level of recall. Finally, we present a thorough quantitative and qualitative analysis of our approach and discuss lessons learned from the results. We will share the database as a benchmark for future research and will also provide our analysis tool as a web service.},
booktitle = {Proceedings of the 22nd ACM SIGSAC Conference on Computer and Communications Security},
pages = {426–437},
numpages = {12},
keywords = {static analysis, machine learning, vulnerabilities},
location = {Denver, Colorado, USA},
series = {CCS '15}
}

@inproceedings{zhou2017automated,
author = {Zhou, Yaqin and Sharma, Asankhaya},
title = {Automated Identification of Security Issues from Commit Messages and Bug Reports},
year = {2017},
isbn = {9781450351058},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3106237.3117771},
doi = {10.1145/3106237.3117771},
abstract = {The number of vulnerabilities in open source libraries is increasing rapidly. However, the majority of them do not go through public disclosure. These unidentified vulnerabilities put developers' products at risk of being hacked since they are increasingly relying on open source libraries to assemble and build software quickly. To find unidentified vulnerabilities in open source libraries and secure modern software development, we describe an efficient automatic vulnerability identification system geared towards tracking large-scale projects in real time using natural language processing and machine learning techniques. Built upon the latent information underlying commit messages and bug reports in open source projects using GitHub, JIRA, and Bugzilla, our K-fold stacking classifier achieves promising results on vulnerability identification. Compared to the state of the art SVM-based classifier in prior work on vulnerability identification in commit messages, we improve precision by 54.55\% while maintaining the same recall rate. For bug reports, we achieve a much higher precision of 0.70 and recall rate of 0.71 compared to existing work. Moreover, observations from running the trained model at SourceClear in production for over 3 months has shown 0.83 precision, 0.74 recall rate, and detected 349 hidden vulnerabilities, proving the effectiveness and generality of the proposed approach.},
booktitle = {Proceedings of the 2017 11th Joint Meeting on Foundations of Software Engineering},
pages = {914–919},
numpages = {6},
keywords = {vulnerability identification, machine learning, bug report, commit},
location = {Paderborn, Germany},
series = {ESEC/FSE 2017}
}

@ARTICLE{chen2019large,
  author={Chen, Xiang and Zhao, Yingquan and Cui, Zhanqi and Meng, Guozhu and Liu, Yang and Wang, Zan},
  journal={IEEE Transactions on Reliability}, 
  title={Large-Scale Empirical Studies on Effort-Aware Security Vulnerability Prediction Methods}, 
  year={2020},
  volume={69},
  number={1},
  pages={70-87},
  doi={10.1109/TR.2019.2924932}}


@inproceedings{li2021vulnerability1,
	title={Vulnerability detection with fine-grained interpretations},
	author={Li, Yi and Wang, Shaohua and Nguyen, Tien N},
	booktitle={Proceedings of the 29th ACM Joint Meeting on European Software Engineering Conference and Symposium on the Foundations of Software Engineering},
	pages={292--303},
	year={2021}
}

@inbook{zhou2019devign,
author = {Zhou, Yaqin and Liu, Shangqing and Siow, Jingkai and Du, Xiaoning and Liu, Yang},
title = {Devign: Effective Vulnerability Identification by Learning Comprehensive Program Semantics via Graph Neural Networks},
year = {2019},
publisher = {Curran Associates Inc.},
address = {Red Hook, NY, USA},
abstract = {Vulnerability identification is crucial to protect the software systems from attacks for cyber security. It is especially important to localize the vulnerable functions among the source code to facilitate the fix. However, it is a challenging and tedious process, and also requires specialized security expertise. Inspired by the work on manually-defined patterns of vulnerabilities from various code representation graphs and the recent advance on graph neural networks, we propose Devign, a general graph neural network based model for graph-level classification through learning on a rich set of code semantic representations. It includes a novel Conv module to efficiently extract useful features in the learned rich node representations for graph-level classification. The model is trained over manually labeled datasets built on 4 diversified large-scale open-source C projects that incorporate high complexity and variety of real source code instead of synthesis code used in previous works. The results of the extensive evaluation on the datasets demonstrate that Devign outperforms the state of the arts significantly with an average of 10.51\% higher accuracy and 8.68\% F1 score, increases averagely 4.66\% accuracy and 6.37\% F1 by the Conv module.},
booktitle = {Proceedings of the 33rd International Conference on Neural Information Processing Systems},
articleno = {915},
numpages = {11}
}


@ARTICLE {li2021vuldeelocator,
author = {Z. Li and D. Zou and S. Xu and Z. Chen and Y. Zhu and H. Jin},
journal = {IEEE Transactions on Dependable and Secure Computing},
title = {VulDeeLocator: A Deep Learning-Based Fine-Grained Vulnerability Detector},
year = {2022},
volume = {19},
number = {04},
issn = {1941-0018},
pages = {2821-2837},
abstract = {Automatically detecting software vulnerabilities is an important problem that has attracted much attention from the academic research community. However, existing vulnerability detectors still cannot achieve the vulnerability detection capability and the locating precision that would warrant their adoption for real-world use. In this article, we present a vulnerability detector that can simultaneously achieve a high detection capability and a high locating precision, dubbed Vulnerability Deep learning-based Locator (VulDeeLocator). In the course of designing VulDeeLocator, we encounter difficulties including how to accommodate semantic relations between the definitions of types as well as macros and their uses across files, how to accommodate accurate control flows and variable define-use relations, and how to achieve high locating precision. We solve these difficulties by using two innovative ideas: (i) leveraging intermediate code to accommodate extra semantic information, and (ii) using the notion of granularity refinement to pin down locations of vulnerabilities. When applied to 200 files randomly selected from three real-world software products, VulDeeLocator detects 18 confirmed vulnerabilities (i.e., true-positives). Among them, 16 vulnerabilities correspond to known vulnerabilities; the other two are not reported in the National Vulnerability Database (NVD) but have been “silently” patched by the vendor of Libav when releasing newer versions.},
keywords = {detectors;integrated circuits;big data;deep learning;syntactics;software;service computing},
doi = {10.1109/TDSC.2021.3076142},
publisher = {IEEE Computer Society},
address = {Los Alamitos, CA, USA},
month = {jul}
}


@article{li2020automated,
	title={Automated vulnerability detection in source code using minimum intermediate representation learning},
	author={Li, Xin and Wang, Lu and Xin, Yang and Yang, Yixian and Chen, Yuling},
	journal={Applied Sciences},
	volume={10},
	number={5},
	pages={1692},
	year={2020},
	publisher={Multidisciplinary Digital Publishing Institute}
}


@ARTICLE {chakraborty2021deep,
author = {S. Chakraborty and R. Krishna and Y. Ding and B. Ray},
journal = {IEEE Transactions on Software Engineering},
title = {Deep Learning Based Vulnerability Detection: Are We There Yet?},
year = {2022},
volume = {48},
number = {09},
issn = {1939-3520},
pages = {3280-3296},
abstract = {Automated detection of software vulnerabilities is a fundamental problem in software security. Existing program analysis techniques either suffer from high false positives or false negatives. Recent progress in Deep Learning (DL) has resulted in a surge of interest in applying DL for automated vulnerability detection. Several recent studies have demonstrated promising results achieving an accuracy of up to 95 percent at detecting vulnerabilities. In this paper, we ask, “how well do the state-of-the-art DL-based techniques perform in a real-world vulnerability prediction scenario?” To our surprise, we find that their performance drops by more than 50 percent. A systematic investigation of what causes such precipitous performance drop reveals that existing DL-based vulnerability prediction approaches suffer from challenges with the training data (e.g., data duplication, unrealistic distribution of vulnerable classes, etc.) and with the model choices (e.g., simple token-based models). As a result, these approaches often do not learn features related to the actual cause of the vulnerabilities. Instead, they learn unrelated artifacts from the dataset (e.g., specific variable/function names, etc.). Leveraging these empirical findings, we demonstrate how a more principled approach to data collection and model design, based on realistic settings of vulnerability prediction, can lead to better solutions. The resulting tools perform significantly better than the studied baseline—up to 33.57 percent boost in precision and 128.38 percent boost in recall compared to the best performing model in the literature. Overall, this paper elucidates existing DL-based vulnerability prediction systems’ potential issues and draws a roadmap for future DL-based vulnerability prediction research.},
keywords = {predictive models;neural networks;testing;data models;security;training;training data},
doi = {10.1109/TSE.2021.3087402},
publisher = {IEEE Computer Society},
address = {Los Alamitos, CA, USA},
month = {sep}
}

@inproceedings{hin2022linevd,
author = {Hin, David and Kan, Andrey and Chen, Huaming and Babar, M. Ali},
title = {LineVD: Statement-Level Vulnerability Detection Using Graph Neural Networks},
year = {2022},
isbn = {9781450393034},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3524842.3527949},
doi = {10.1145/3524842.3527949},
abstract = {Current machine-learning based software vulnerability detection methods are primarily conducted at the function-level. However, a key limitation of these methods is that they do not indicate the specific lines of code contributing to vulnerabilities. This limits the ability of developers to efficiently inspect and interpret the predictions from a learnt model, which is crucial for integrating machine-learning based tools into the software development work-flow. Graph-based models have shown promising performance in function-level vulnerability detection, but their capability for statement-level vulnerability detection has not been extensively explored. While interpreting function-level predictions through explainable AI is one promising direction, we herein consider the statement-level software vulnerability detection task from a fully supervised learning perspective. We propose a novel deep learning framework, LineVD, which formulates statement-level vulnerability detection as a node classification task. LineVD leverages control and data dependencies between statements using graph neural networks, and a transformer-based model to encode the raw source code tokens. In particular, by addressing the conflicting outputs between function-level and statement-level information, LineVD significantly improve the prediction performance without vulnerability status for function code. We have conducted extensive experiments against a large-scale collection of real-world C/C++ vulnerabilities obtained from multiple real-world projects, and demonstrate an increase of 105\% in F1-score over the current state-of-the-art.},
booktitle = {Proceedings of the 19th International Conference on Mining Software Repositories},
pages = {596–607},
numpages = {12},
keywords = {software vulnerability detection, deep learning, program representation},
location = {Pittsburgh, Pennsylvania},
series = {MSR '22}
}


@Misc{cat-website,
  title = {CAT},
  year = 2023,
  url = {https://github.com/vulnerability-assessment-cat/vulnerability-assessment-cat},
}

@inproceedings{fu2016using,
	title={Using LSTM and GRU neural network methods for traffic flow prediction},
	author={Fu, Rui and Zhang, Zuo and Li, Li},
	booktitle={2016 31st Youth Academic Annual Conference of Chinese Association of Automation (YAC)},
	pages={324--328},
	year={2016},
	organization={IEEE}
}

@ARTICLE {li2021sysevr,
author = {Z. Li and D. Zou and S. Xu and H. Jin and Y. Zhu and Z. Chen},
journal = {IEEE Transactions on Dependable and Secure Computing},
title = {SySeVR: A Framework for Using Deep Learning to Detect Software Vulnerabilities},
year = {2022},
volume = {19},
number = {04},
issn = {1941-0018},
pages = {2244-2258},
abstract = {The detection of software vulnerabilities (or vulnerabilities for short) is an important problem that has yet to be tackled, as manifested by the many vulnerabilities reported on a daily basis. This calls for machine learning methods for vulnerability detection. Deep learning is attractive for this purpose because it alleviates the requirement to manually define features. Despite the tremendous success of deep learning in other application domains, its applicability to vulnerability detection is not systematically understood. In order to fill this void, we propose the first systematic framework for using deep learning to detect vulnerabilities in C/C++ programs with source code. The framework, dubbed Syntax-based, Semantics-based, and Vector Representations (SySeVR), focuses on obtaining program representations that can accommodate syntax and semantic information pertinent to vulnerabilities. Our experiments with four software products demonstrate the usefulness of the framework: we detect 15 vulnerabilities that are not reported in the National Vulnerability Database. Among these 15 vulnerabilities, seven are unknown and have been reported to the vendors, and the other eight have been “silently” patched by the vendors when releasing newer versions of the pertinent software products.},
keywords = {deep learning;syntactics;software;semantics;proposals;image processing;big data},
doi = {10.1109/TDSC.2021.3051525},
publisher = {IEEE Computer Society},
address = {Los Alamitos, CA, USA},
month = {jul}
}

@inproceedings{russell2018automated,
	title={Automated vulnerability detection in source code using deep representation learning},
	author={Russell, Rebecca and Kim, Louis and Hamilton, Lei and Lazovich, Tomo and Harer, Jacob and Ozdemir, Onur and Ellingwood, Paul and McConley, Marc},
	booktitle={2018 17th IEEE International Conference on Machine Learning and Applications (ICMLA)},
	pages={757--762},
	year={2018},
	organization={IEEE}
}

@ARTICLE {li2018vuldeepecker,
author = {D. Zou and S. Wang and S. Xu and Z. Li and H. Jin},
journal = {IEEE Transactions on Dependable and Secure Computing},
title = {VulDeePecker: A Deep Learning-Based System for Multiclass Vulnerability Detection},
year = {2021},
volume = {18},
number = {05},
issn = {1941-0018},
pages = {2224-2236},
abstract = {Fine-grained software vulnerability detection is an important and challenging problem. Ideally, a detection system (or detector) not only should be able to detect whether or not a program contains vulnerabilities, but also should be able to pinpoint the type of a vulnerability in question. Existing vulnerability detection methods based on deep learning can detect the presence of vulnerabilities (i.e., addressing the binary classification or detection problem), but cannot pinpoint types of vulnerabilities (i.e., incapable of addressing multiclass classification). In this paper, we propose the first deep learning-based system for multiclass vulnerability detection, dubbed μ VulDeePecker. The key insight underlying μ VulDeePecker is the concept of code attention, which can capture information that can help pinpoint types of vulnerabilities, even when the samples are small. For this purpose, we create a dataset from scratch and use it to evaluate the effectiveness of μ VulDeePecker. Experimental results show that μ VulDeePecker is effective for multiclass vulnerability detection and that accommodating control-dependence (other than data-dependence) can lead to higher detection capabilities.},
keywords = {deep learning;neural networks;technological innovation;software;feature extraction;big data},
doi = {10.1109/TDSC.2019.2942930},
publisher = {IEEE Computer Society},
address = {Los Alamitos, CA, USA},
month = {sep}
}


@INPROCEEDINGS{linevul-msr22,
  author={Fu, Michael and Tantithamthavorn, Chakkrit},
  booktitle={2022 IEEE/ACM 19th International Conference on Mining Software Repositories (MSR)}, 
  title={LineVul: A Transformer-based Line-Level Vulnerability Prediction}, 
  year={2022},
  volume={},
  number={},
  pages={608-620},
  doi={10.1145/3524842.3528452}}


@inproceedings{cc2vec,
author = {Hoang, Thong and Kang, Hong Jin and Lo, David and Lawall, Julia},
title = {CC2Vec: Distributed Representations of Code Changes},
year = {2020},
isbn = {9781450371216},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3377811.3380361},
doi = {10.1145/3377811.3380361},
abstract = {Existing work on software patches often use features specific to a single task. These works often rely on manually identified features, and human effort is required to identify these features for each task. In this work, we propose CC2Vec, a neural network model that learns a representation of code changes guided by their accompanying log messages, which represent the semantic intent of the code changes. CC2Vec models the hierarchical structure of a code change with the help of the attention mechanism and uses multiple comparison functions to identify the differences between the removed and added code.To evaluate if CC2Vec can produce a distributed representation of code changes that is general and useful for multiple tasks on software patches, we use the vectors produced by CC2Vec for three tasks: log message generation, bug fixing patch identification, and just-in-time defect prediction. In all tasks, the models using CC2Vec outperform the state-of-the-art techniques.},
booktitle = {Proceedings of the ACM/IEEE 42nd International Conference on Software Engineering},
pages = {518–529},
numpages = {12},
location = {Seoul, South Korea},
series = {ICSE '20}
}

@article{commit2vec,
author = {Cabrera Lozoya, Roc\'{\i}o and Baumann, Arnaud and Sabetta, Antonino and Bezzi, Michele},
title = {Commit2Vec: Learning Distributed Representations of Code Changes},
year = {2021},
issue_date = {May 2021},
publisher = {Springer-Verlag},
address = {Berlin, Heidelberg},
volume = {2},
number = {3},
url = {https://doi.org/10.1007/s42979-021-00566-z},
doi = {10.1007/s42979-021-00566-z},
abstract = {Deep learning methods have found successful applications in fields like image classification and natural language processing. They have recently been applied to source code analysis too, due to the enormous amount of freely available source code (e.g., from open-source software repositories). In this work, we elaborate upon a state-of-the-art approach for source code representation, which uses information about its syntactic structure, and we extend it to represent source code changes (i.e., commits). We use this representation to tackle an industrial-relevant task: the classification of security-relevant commits. We leverage on transfer learning, a machine learning technique which reuses, or transfers, information learned from previous tasks (commonly called pretext tasks) to tackle a new target task. We assess the impact of using two different pretext tasks, for which abundant labeled data is available, to tackle the classification of security-relevant commits. Our results indicate that representations that exploit the structural information in code syntax outperform token-based representations. Furthermore, we show that pre-training on a small dataset (>104 samples), but for a pretext task that is closely related to the target task, results in better performance metrics than pre-training on a loosely related pretext task with a very large dataset (>106 samples).},
journal = {SN Comput. Sci.},
month = {mar},
numpages = {16},
keywords = {Deep learning for source code, Commit representation, Source code representation, Software vulnerability analysis, Source code embedding}
}
