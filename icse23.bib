@article{li2019improving,
	title={Improving bug detection via context-based code representation learning and attention-based neural networks},
	author={Li, Yi and Wang, Shaohua and Nguyen, Tien N and Van Nguyen, Son},
	journal={Proceedings of the ACM on Programming Languages},
	volume={3},
	number={OOPSLA},
	pages={1--30},
	year={2019},
	publisher={ACM New York, NY, USA}
}

@Misc{NNI,
	howpublished = {\url{https://github.com/microsoft/nni}},
	note = {Last Accessed August 28th, 2020},
	title = {Neural Network Intelligence.},
	author = {Microsoft}
}

@Misc{joern,
	howpublished = {\url{https://github.com/ShiftLeftSecurity/joern}},
	note = {Last Accessed August 28th, 2020},
	title = {Open-source code analysis platform for C/C++ based on code property graphs},
	author = {joern}
}

@article{FAGCN,
	title={Feature-attention graph convolutional networks for noise resilient learning},
	author={Shi, Min and Tang, Yufei and Zhu, Xingquan and Liu, Jianxun},
	journal={arXiv preprint arXiv:1912.11755},
	year={2019}
}

@article{Engler-2001,
 author = {Engler, Dawson and Chen, David Yu and Hallem, Seth and Chou, Andy and Chelf, Benjamin},
 title = {Bugs As Deviant Behavior: A General Approach to Inferring Errors in Systems Code},
 journal = {SIGOPS Oper. Syst. Rev.},
 issue_date = {Dec. 2001},
 volume = {35},
 number = {5},
 month = oct,
 year = {2001},
 issn = {0163-5980},
 pages = {57--72},
 numpages = {16},
 url = {http://doi.acm.org/10.1145/502059.502041},
 doi = {10.1145/502059.502041},
 acmid = {502041},
 publisher = {ACM},
 address = {New York, NY, USA},
} 


@inproceedings{tbar-issta19,
author = {Liu, Kui and Koyuncu, Anil and Kim, Dongsun and Bissyand\'{e}, Tegawend\'{e} F.},
title = {TBar: Revisiting Template-Based Automated Program Repair},
year = {2019},
isbn = {9781450362245},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3293882.3330577},
doi = {10.1145/3293882.3330577},
booktitle = {Proceedings of the 28th ACM SIGSOFT International Symposium on Software Testing and Analysis},
pages = {31–42},
numpages = {12},
keywords = {Automated program repair, empirical assessment, fix pattern},
location = {Beijing, China},
series = {ISSTA}
}


@online{FlawFinder,
	title = {FlawFinder},
	year = nd,
	url = {http://www.dwheeler.com/FlawFinder},
}

@online{Checkmarx,
	title = {Checkmarx},
	year = nd,
	url = {https://www.checkmarx.com/},
}

@online{HPFortify,
	title = {HP Fortify},
	year = nd,
	url = {https://www.hpfod.com/},
}

@online{Coverity,
	title = {Coverity},
	year = nd,
	url = {https://scan.coverity.com/},
}

@online{RATS,
	title = {RATS: Rough Audit Tool for Security},
	year = nd,
	url = {https://code.google.com/archive/p/rough-auditing-tool-for-security/},
}

@inproceedings{viega2000its4,
	title={ITS4: A static vulnerability scanner for C and C++ code},
	author={Viega, John and Bloch, Jon-Thomas and Kohno, Yoshi and McGraw, Gary},
	booktitle={Proceedings 16th Annual Computer Security Applications Conference (ACSAC'00)},
	pages={257--267},
	year={2000},
	organization={IEEE}
}

@inproceedings{fan2020msr,
	title={A C/C++ Code Vulnerability Dataset with Code Changes and CVE Summaries},
	author={Fan, Jiahao and Li, Yi and Wang, Shaohua and Nguyen, Tien},
	booktitle={The 2020 International Conference on Mining Software Repositories (MSR)},
	year={2020},
	organization={IEEE}
}

@article{li2018vuldeepecker,
	title={Vuldeepecker: A deep learning-based system for vulnerability detection},
	author={Li, Zhen and Zou, Deqing and Xu, Shouhuai and Ou, Xinyu and Jin, Hai and Wang, Sujuan and Deng, Zhijun and Zhong, Yuyi},
	journal={arXiv preprint arXiv:1801.01681},
	year={2018}
}

@inproceedings{grieco2016toward,
	title={Toward large-scale vulnerability discovery using machine learning},
	author={Grieco, Gustavo and Grinblat, Guillermo Luis and Uzal, Lucas and Rawat, Sanjay and Feist, Josselin and Mounier, Laurent},
	booktitle={Proceedings of the Sixth ACM Conference on Data and Application Security and Privacy},
	pages={85--96},
	year={2016}
}

@article{ghaffarian2017software,
	title={Software vulnerability analysis and discovery using machine-learning and data-mining techniques: A survey},
	author={Ghaffarian, Seyed Mohammad and Shahriari, Hamid Reza},
	journal={ACM Computing Surveys (CSUR)},
	volume={50},
	number={4},
	pages={1--36},
	year={2017},
	publisher={ACM New York, NY, USA}
}

@inproceedings{neuhaus2009beauty,
author = {Neuhaus, Stephan and Zimmermann, Thomas},
title = {The Beauty and the Beast: Vulnerabilities in Red Hat’s Packages},
year = {2009},
publisher = {USENIX Association},
address = {USA},
abstract = {In an empirical study of 3241 Red Hat packages, we show that software vulnerabilities correlate with dependencies between packages. With formal concept analysis and statistical hypothesis testing, we identify dependencies that decrease the risk of vulnerabilities ("beauties") or increase the risk ("beasts"). Using support vector machines on dependency data, our prediction models successfully and consistently catch about two thirds of vulnerable packages (median recall of 0.65). When our models predict a package as vulnerable, it is correct more than eight times out of ten (median precision of 0.83). Our findings help developers to choose new dependencies wisely and make them aware of risky dependencies.},
booktitle = {Proceedings of the 2009 Conference on USENIX Annual Technical Conference},
pages = {30},
numpages = {1},
location = {San Diego, California},
series = {USENIX'09}
}

@inproceedings{neuhaus2007predicting,
author = {Neuhaus, Stephan and Zimmermann, Thomas and Holler, Christian and Zeller, Andreas},
title = {Predicting Vulnerable Software Components},
year = {2007},
isbn = {9781595937032},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1315245.1315311},
doi = {10.1145/1315245.1315311},
abstract = {Where do most vulnerabilities occur in software? Our Vulture tool automatically mines existing vulnerability databases and version archives to map past vulnerabilities to components. The resulting ranking of the most vulnerable components is a perfect base for further investigations on what makes components vulnerable.In an investigation of the Mozilla vulnerability history, we surprisingly found that components that had a single vulnerability in the past were generally not likely to have further vulnerabilities. However, components that had similar imports or function calls were likely to be vulnerable.Based on this observation, we were able to extend Vulture by a simple predictor that correctly predicts about half of all vulnerable components, and about two thirds of all predictions are correct. This allows developers and project managers to focus their their efforts where it is needed most: "We should look at nsXPInstallManager because it is likely to contain yet unknown vulnerabilities.".},
booktitle = {Proceedings of the 14th ACM Conference on Computer and Communications Security},
pages = {529–540},
numpages = {12},
keywords = {software security, prediction},
location = {Alexandria, Virginia, USA},
series = {CCS '07}
}

@ARTICLE{scandariato2014predicting,
  author={Scandariato, Riccardo and Walden, James and Hovsepyan, Aram and Joosen, Wouter},
  journal={IEEE Transactions on Software Engineering}, 
  title={Predicting Vulnerable Software Components via Text Mining}, 
  year={2014},
  volume={40},
  number={10},
  pages={993-1006},
  doi={10.1109/TSE.2014.2340398}}

@inproceedings{moshtari2016evaluating,
	title={Evaluating and comparing complexity, coupling and a new proposed set of coupling metrics in cross-project vulnerability prediction},
	author={Moshtari, Sara and Sami, Ashkan},
	booktitle={Proceedings of the 31st Annual ACM Symposium on Applied Computing},
	pages={1415--1421},
	year={2016}
}

@inproceedings{yamaguchi2012generalized,
author = {Yamaguchi, Fabian and Lottmann, Markus and Rieck, Konrad},
title = {Generalized Vulnerability Extrapolation Using Abstract Syntax Trees},
year = {2012},
isbn = {9781450313124},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2420950.2421003},
doi = {10.1145/2420950.2421003},
abstract = {The discovery of vulnerabilities in source code is a key for securing computer systems. While specific types of security flaws can be identified automatically, in the general case the process of finding vulnerabilities cannot be automated and vulnerabilities are mainly discovered by manual analysis. In this paper, we propose a method for assisting a security analyst during auditing of source code. Our method proceeds by extracting abstract syntax trees from the code and determining structural patterns in these trees, such that each function in the code can be described as a mixture of these patterns. This representation enables us to decompose a known vulnerability and extrapolate it to a code base, such that functions potentially suffering from the same flaw can be suggested to the analyst. We evaluate our method on the source code of four popular open-source projects: LibTIFF, FFmpeg, Pidgin and Asterisk. For three of these projects, we are able to identify zero-day vulnerabilities by inspecting only a small fraction of the code bases.},
booktitle = {Proceedings of the 28th Annual Computer Security Applications Conference},
pages = {359–368},
numpages = {10},
location = {Orlando, Florida, USA},
series = {ACSAC '12}
}


@ARTICLE{shin2010evaluating,
  author={Shin, Yonghee and Meneely, Andrew and Williams, Laurie and Osborne, Jason A.},
  journal={IEEE Transactions on Software Engineering}, 
  title={Evaluating Complexity, Code Churn, and Developer Activity Metrics as Indicators of Software Vulnerabilities}, 
  year={2011},
  volume={37},
  number={6},
  pages={772-787},
  doi={10.1109/TSE.2010.81}}

@inproceedings{yamaguchi2011vulnerability,
	title={Vulnerability extrapolation: Assisted discovery of vulnerabilities using machine learning},
	author={Yamaguchi, Fabian and Lindner, Felix and Rieck, Konrad},
	booktitle={Proceedings of the 5th USENIX conference on Offensive technologies},
	pages={13--13},
	year={2011}
}

@inproceedings{chernis2018machine,
	title={Machine learning methods for software vulnerability detection},
	author={Chernis, Boris and Verma, Rakesh},
	booktitle={Proceedings of the Fourth ACM International Workshop on Security and Privacy Analytics},
	pages={31--39},
	year={2018}
}

@inproceedings{lin2017poster,
author = {Lin, Guanjun and Zhang, Jun and Luo, Wei and Pan, Lei and Xiang, Yang},
title = {POSTER: Vulnerability Discovery with Function Representation Learning from Unlabeled Projects},
year = {2017},
isbn = {9781450349468},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3133956.3138840},
doi = {10.1145/3133956.3138840},
abstract = {In cybersecurity, vulnerability discovery in source code is a fundamental problem. To automate vulnerability discovery, Machine learning (ML) based techniques has attracted tremendous attention. However, existing ML-based techniques focus on the component or file level detection, and thus considerable human effort is still required to pinpoint the vulnerable code fragments. Using source code files also limit the generalisability of the ML models across projects. To address such challenges, this paper targets at the function-level vulnerability discovery in the cross-project scenario. A function representation learning method is proposed to obtain the high-level and generalizable function representations from the abstract syntax tree (AST). First, the serialized ASTs are used to learn project independence features. Then, a customized bi-directional LSTM neural network is devised to learn the sequential AST representations from the large number of raw features. The new function-level representation demonstrated promising performance gain, using a unique dataset where we manually labeled 6000+ functions from three open-source projects. The results confirm that the huge potential of the new AST-based function representation learning.},
booktitle = {Proceedings of the 2017 ACM SIGSAC Conference on Computer and Communications Security},
pages = {2539–2541},
numpages = {3},
keywords = {representation learning, cross-project, vulnerability detection, AST},
location = {Dallas, Texas, USA},
series = {CCS '17}
}

@inproceedings{russell2018automated,
	title={Automated vulnerability detection in source code using deep representation learning},
	author={Russell, Rebecca and Kim, Louis and Hamilton, Lei and Lazovich, Tomo and Harer, Jacob and Ozdemir, Onur and Ellingwood, Paul and McConley, Marc},
	booktitle={2018 17th IEEE International Conference on Machine Learning and Applications (ICMLA)},
	pages={757--762},
	year={2018},
	organization={IEEE}
}

@article{harer2018automated,
	title={Automated software vulnerability detection with machine learning},
	author={Harer, Jacob A and Kim, Louis Y and Russell, Rebecca L and Ozdemir, Onur and Kosta, Leonard R and Rangamani, Akshay and Hamilton, Lei H and Centeno, Gabriel I and Key, Jonathan R and Ellingwood, Paul M and others},
	journal={arXiv preprint arXiv:1803.04497},
	year={2018}
}

@article{li2018sysevr,
	title={Sysevr: A framework for using deep learning to detect software vulnerabilities},
	author={Li, Zhen and Zou, Deqing and Xu, Shouhuai and Jin, Hai and Zhu, Yawei and Chen, Zhaoxuan},
	journal={arXiv preprint arXiv:1807.06756},
	year={2018}
}


@inproceedings{xu2010memory,
	title={A memory model for static analysis of C programs},
	author={Xu, Zhongxing and Kremenek, Ted and Zhang, Jian},
	booktitle={International Symposium On Leveraging Applications of Formal Methods, Verification and Validation},
	pages={535--548},
	year={2010},
	organization={Springer}
}

@inproceedings{harer2018learning,
author = {Harer, Jacob A. and Ozdemir, Onur and Lazovich, Tomo and Reale, Christopher P. and Russell, Rebecca L. and Kim, Louis Y. and Chin, Peter},
title = {Learning to Repair Software Vulnerabilities with Generative Adversarial Networks},
year = {2018},
publisher = {Curran Associates Inc.},
address = {Red Hook, NY, USA},
abstract = {Motivated by the problem of automated repair of software vulnerabilities, we propose an adversarial learning approach that maps from one discrete source domain to another target domain without requiring paired labeled examples or source and target domains to be bijections. We demonstrate that the proposed adversarial learning approach is an effective technique for repairing software vulnerabilities, performing close to seq2seq approaches that require labeled pairs. The proposed Generative Adversarial Network approach is application-agnostic in that it can be applied to other problems similar to code repair, such as grammar correction or sentiment translation.},
booktitle = {Proceedings of the 32nd International Conference on Neural Information Processing Systems},
pages = {7944–7954},
numpages = {11},
location = {Montr\'{e}al, Canada},
series = {NIPS'18}
}

@inproceedings{du2019leopard,
	title={Leopard: Identifying vulnerable code for vulnerability assessment through program metrics},
	author={Du, Xiaoning and Chen, Bihuan and Li, Yuekang and Guo, Jianmin and Zhou, Yaqin and Liu, Yang and Jiang, Yu},
	booktitle={2019 IEEE/ACM 41st International Conference on Software Engineering (ICSE)},
]	pages={60--71},
	year={2019},
	organization={IEEE}
}


@article{bohme2017coverage,
	title={Coverage-based greybox fuzzing as markov chain},
	author={B{\"o}hme, Marcel and Pham, Van-Thuan and Roychoudhury, Abhik},
	journal={IEEE Transactions on Software Engineering},
	volume={45},
	number={5},
	pages={489--506},
	year={2017},
	publisher={IEEE}
}

@inproceedings{wang2010taintscope,
	title={TaintScope: A checksum-aware directed fuzzing tool for automatic software vulnerability detection},
	author={Wang, Tielei and Wei, Tao and Gu, Guofei and Zou, Wei},
	booktitle={2010 IEEE Symposium on Security and Privacy},
	pages={497--512},
	year={2010},
	organization={IEEE}
}

@inproceedings{wen2020memlock,
	title={Memlock: Memory usage guided fuzzing},
	author={Wen, Cheng and Wang, Haijun and Li, Yuekang and Qin, Shengchao and Liu, Yang and Xu, Zhiwu and Chen, Hongxu and Xie, Xiaofei and Pu, Geguang and Liu, Ting},
	booktitle={42nd International Conference on Software Engineering},
	year={2020},
	organization={ACM}
}
@inproceedings{wang2017skyfire,
	title={Skyfire: Data-driven seed generation for fuzzing},
	author={Wang, Junjie and Chen, Bihuan and Wei, Lei and Liu, Yang},
	booktitle={2017 IEEE Symposium on Security and Privacy (SP)},
	pages={579--594},
	year={2017},
	organization={IEEE}
}

@inproceedings{stephens2016driller,
	title={Driller: Augmenting Fuzzing Through Selective Symbolic Execution.},
	author={Stephens, Nick and Grosen, John and Salls, Christopher and Dutcher, Andrew and Wang, Ruoyu and Corbetta, Jacopo and Shoshitaishvili, Yan and Kruegel, Christopher and Vigna, Giovanni},
	booktitle={NDSS},
	volume={16},
	number={2016},
	pages={1--16},
	year={2016}
}

@article{li2018sysevr,
	title={Sysevr: A framework for using deep learning to detect software vulnerabilities},
	author={Li, Zhen and Zou, Deqing and Xu, Shouhuai and Jin, Hai and Zhu, Yawei and Chen, Zhaoxuan},
	journal={arXiv preprint arXiv:1807.06756},
	year={2018}
}

@inproceedings{russell2018automated,
	title={Automated vulnerability detection in source code using deep representation learning},
	author={Russell, Rebecca and Kim, Louis and Hamilton, Lei and Lazovich, Tomo and Harer, Jacob and Ozdemir, Onur and Ellingwood, Paul and McConley, Marc},
	booktitle={2018 17th IEEE international conference on machine learning and applications (ICMLA)},
	pages={757--762},
	year={2018},
	organization={IEEE}
}

@article{chakraborty2020deep,
	title={Deep Learning based Vulnerability Detection: Are We There Yet?},
	author={Chakraborty, Saikat and Krishna, Rahul and Ding, Yangruibo and Ray, Baishakhi},
	journal={arXiv preprint arXiv:2009.07235},
	year={2020}
}

@inproceedings{cha2015program,
	title={Program-adaptive mutational fuzzing},
	author={Cha, Sang Kil and Woo, Maverick and Brumley, David},
	booktitle={2015 IEEE Symposium on Security and Privacy},
	pages={725--741},
	year={2015},
	organization={IEEE}
}

@inproceedings{babic2011statically,
	title={Statically-directed dynamic automated test generation},
	author={Babi{\'c}, Domagoj and Martignoni, Lorenzo and McCamant, Stephen and Song, Dawn},
	booktitle={Proceedings of the 2011 International Symposium on Software Testing and Analysis},
	pages={12--22},
	year={2011}
}

@inproceedings{zhou2019devign,
	title={Devign: Effective vulnerability identification by learning comprehensive program semantics via graph neural networks},
	author={Zhou, Yaqin and Liu, Shangqing and Siow, Jingkai and Du, Xiaoning and Liu, Yang},
	booktitle={Advances in Neural Information Processing Systems},
	pages={10197--10207},
	year={2019}
}

@article{GCN16,
  author    = {Thomas N. Kipf and
               Max Welling},
  title     = {Semi-Supervised Classification with Graph Convolutional Networks},
  journal   = {CoRR},
  volume    = {abs/1609.02907},
  year      = {2016},
  url       = {http://arxiv.org/abs/1609.02907},
  archivePrefix = {arXiv},
  eprint    = {1609.02907},
  timestamp = {Mon, 13 Aug 2018 16:48:31 +0200},
  biburl    = {https://dblp.org/rec/journals/corr/KipfW16.bib},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}

@article{BERT,
  author    = {Jacob Devlin and
               Ming{-}Wei Chang and
               Kenton Lee and
               Kristina Toutanova},
  title     = {{BERT:} Pre-training of Deep Bidirectional Transformers for Language
               Understanding},
  journal   = {CoRR},
  volume    = {abs/1810.04805},
  year      = {2018},
  url       = {http://arxiv.org/abs/1810.04805},
  archivePrefix = {arXiv},
}

@inproceedings{zhang2019novel,
	title={A novel neural source code representation based on abstract syntax tree},
	author={Zhang, Jian and Wang, Xu and Zhang, Hongyu and Sun, Hailong and Wang, Kaixuan and Liu, Xudong},
	booktitle={2019 IEEE/ACM 41st International Conference on Software Engineering (ICSE)},
	pages={783--794},
	year={2019},
	organization={IEEE}
}